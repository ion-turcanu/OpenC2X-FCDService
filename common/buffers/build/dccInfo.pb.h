// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dccInfo.proto

#ifndef PROTOBUF_dccInfo_2eproto__INCLUDED
#define PROTOBUF_dccInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace infoPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dccInfo_2eproto();
void protobuf_AssignDesc_dccInfo_2eproto();
void protobuf_ShutdownFile_dccInfo_2eproto();

class DccInfo;

// ===================================================================

class DccInfo : public ::google::protobuf::Message {
 public:
  DccInfo();
  virtual ~DccInfo();

  DccInfo(const DccInfo& from);

  inline DccInfo& operator=(const DccInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DccInfo& default_instance();

  void Swap(DccInfo* other);

  // implements Message ----------------------------------------------

  DccInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DccInfo& from);
  void MergeFrom(const DccInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional double channelLoad = 2;
  inline bool has_channelload() const;
  inline void clear_channelload();
  static const int kChannelLoadFieldNumber = 2;
  inline double channelload() const;
  inline void set_channelload(double value);

  // optional string state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const char* value, size_t size);
  inline ::std::string* mutable_state();
  inline ::std::string* release_state();
  inline void set_allocated_state(::std::string* state);

  // optional string accessCategory = 4;
  inline bool has_accesscategory() const;
  inline void clear_accesscategory();
  static const int kAccessCategoryFieldNumber = 4;
  inline const ::std::string& accesscategory() const;
  inline void set_accesscategory(const ::std::string& value);
  inline void set_accesscategory(const char* value);
  inline void set_accesscategory(const char* value, size_t size);
  inline ::std::string* mutable_accesscategory();
  inline ::std::string* release_accesscategory();
  inline void set_allocated_accesscategory(::std::string* accesscategory);

  // optional int32 availableTokens = 5;
  inline bool has_availabletokens() const;
  inline void clear_availabletokens();
  static const int kAvailableTokensFieldNumber = 5;
  inline ::google::protobuf::int32 availabletokens() const;
  inline void set_availabletokens(::google::protobuf::int32 value);

  // optional int32 queuedPackets = 6;
  inline bool has_queuedpackets() const;
  inline void clear_queuedpackets();
  static const int kQueuedPacketsFieldNumber = 6;
  inline ::google::protobuf::int32 queuedpackets() const;
  inline void set_queuedpackets(::google::protobuf::int32 value);

  // optional int32 dccMechanism = 7;
  inline bool has_dccmechanism() const;
  inline void clear_dccmechanism();
  static const int kDccMechanismFieldNumber = 7;
  inline ::google::protobuf::int32 dccmechanism() const;
  inline void set_dccmechanism(::google::protobuf::int32 value);

  // optional double txPower = 8;
  inline bool has_txpower() const;
  inline void clear_txpower();
  static const int kTxPowerFieldNumber = 8;
  inline double txpower() const;
  inline void set_txpower(double value);

  // optional double tokenInterval = 9;
  inline bool has_tokeninterval() const;
  inline void clear_tokeninterval();
  static const int kTokenIntervalFieldNumber = 9;
  inline double tokeninterval() const;
  inline void set_tokeninterval(double value);

  // optional double datarate = 10;
  inline bool has_datarate() const;
  inline void clear_datarate();
  static const int kDatarateFieldNumber = 10;
  inline double datarate() const;
  inline void set_datarate(double value);

  // optional double carrierSense = 11;
  inline bool has_carriersense() const;
  inline void clear_carriersense();
  static const int kCarrierSenseFieldNumber = 11;
  inline double carriersense() const;
  inline void set_carriersense(double value);

  // optional int32 flushReqPackets = 12;
  inline bool has_flushreqpackets() const;
  inline void clear_flushreqpackets();
  static const int kFlushReqPacketsFieldNumber = 12;
  inline ::google::protobuf::int32 flushreqpackets() const;
  inline void set_flushreqpackets(::google::protobuf::int32 value);

  // optional int32 flushNotReqPackets = 13;
  inline bool has_flushnotreqpackets() const;
  inline void clear_flushnotreqpackets();
  static const int kFlushNotReqPacketsFieldNumber = 13;
  inline ::google::protobuf::int32 flushnotreqpackets() const;
  inline void set_flushnotreqpackets(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:infoPackage.DccInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_channelload();
  inline void clear_has_channelload();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_accesscategory();
  inline void clear_has_accesscategory();
  inline void set_has_availabletokens();
  inline void clear_has_availabletokens();
  inline void set_has_queuedpackets();
  inline void clear_has_queuedpackets();
  inline void set_has_dccmechanism();
  inline void clear_has_dccmechanism();
  inline void set_has_txpower();
  inline void clear_has_txpower();
  inline void set_has_tokeninterval();
  inline void clear_has_tokeninterval();
  inline void set_has_datarate();
  inline void clear_has_datarate();
  inline void set_has_carriersense();
  inline void clear_has_carriersense();
  inline void set_has_flushreqpackets();
  inline void clear_has_flushreqpackets();
  inline void set_has_flushnotreqpackets();
  inline void clear_has_flushnotreqpackets();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  double channelload_;
  ::std::string* state_;
  ::std::string* accesscategory_;
  ::google::protobuf::int32 availabletokens_;
  ::google::protobuf::int32 queuedpackets_;
  double txpower_;
  double tokeninterval_;
  ::google::protobuf::int32 dccmechanism_;
  ::google::protobuf::int32 flushreqpackets_;
  double datarate_;
  double carriersense_;
  ::google::protobuf::int32 flushnotreqpackets_;
  friend void  protobuf_AddDesc_dccInfo_2eproto();
  friend void protobuf_AssignDesc_dccInfo_2eproto();
  friend void protobuf_ShutdownFile_dccInfo_2eproto();

  void InitAsDefaultInstance();
  static DccInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// DccInfo

// optional int64 time = 1;
inline bool DccInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DccInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DccInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DccInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DccInfo::time() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.time)
  return time_;
}
inline void DccInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.time)
}

// optional double channelLoad = 2;
inline bool DccInfo::has_channelload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DccInfo::set_has_channelload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DccInfo::clear_has_channelload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DccInfo::clear_channelload() {
  channelload_ = 0;
  clear_has_channelload();
}
inline double DccInfo::channelload() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.channelLoad)
  return channelload_;
}
inline void DccInfo::set_channelload(double value) {
  set_has_channelload();
  channelload_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.channelLoad)
}

// optional string state = 3;
inline bool DccInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DccInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DccInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DccInfo::clear_state() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_->clear();
  }
  clear_has_state();
}
inline const ::std::string& DccInfo::state() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.state)
  return *state_;
}
inline void DccInfo::set_state(const ::std::string& value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.state)
}
inline void DccInfo::set_state(const char* value) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(value);
  // @@protoc_insertion_point(field_set_char:infoPackage.DccInfo.state)
}
inline void DccInfo::set_state(const char* value, size_t size) {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:infoPackage.DccInfo.state)
}
inline ::std::string* DccInfo::mutable_state() {
  set_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    state_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:infoPackage.DccInfo.state)
  return state_;
}
inline ::std::string* DccInfo::release_state() {
  clear_has_state();
  if (state_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = state_;
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DccInfo::set_allocated_state(::std::string* state) {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (state) {
    set_has_state();
    state_ = state;
  } else {
    clear_has_state();
    state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:infoPackage.DccInfo.state)
}

// optional string accessCategory = 4;
inline bool DccInfo::has_accesscategory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DccInfo::set_has_accesscategory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DccInfo::clear_has_accesscategory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DccInfo::clear_accesscategory() {
  if (accesscategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesscategory_->clear();
  }
  clear_has_accesscategory();
}
inline const ::std::string& DccInfo::accesscategory() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.accessCategory)
  return *accesscategory_;
}
inline void DccInfo::set_accesscategory(const ::std::string& value) {
  set_has_accesscategory();
  if (accesscategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesscategory_ = new ::std::string;
  }
  accesscategory_->assign(value);
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.accessCategory)
}
inline void DccInfo::set_accesscategory(const char* value) {
  set_has_accesscategory();
  if (accesscategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesscategory_ = new ::std::string;
  }
  accesscategory_->assign(value);
  // @@protoc_insertion_point(field_set_char:infoPackage.DccInfo.accessCategory)
}
inline void DccInfo::set_accesscategory(const char* value, size_t size) {
  set_has_accesscategory();
  if (accesscategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesscategory_ = new ::std::string;
  }
  accesscategory_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:infoPackage.DccInfo.accessCategory)
}
inline ::std::string* DccInfo::mutable_accesscategory() {
  set_has_accesscategory();
  if (accesscategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    accesscategory_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:infoPackage.DccInfo.accessCategory)
  return accesscategory_;
}
inline ::std::string* DccInfo::release_accesscategory() {
  clear_has_accesscategory();
  if (accesscategory_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = accesscategory_;
    accesscategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DccInfo::set_allocated_accesscategory(::std::string* accesscategory) {
  if (accesscategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesscategory_;
  }
  if (accesscategory) {
    set_has_accesscategory();
    accesscategory_ = accesscategory;
  } else {
    clear_has_accesscategory();
    accesscategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:infoPackage.DccInfo.accessCategory)
}

// optional int32 availableTokens = 5;
inline bool DccInfo::has_availabletokens() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DccInfo::set_has_availabletokens() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DccInfo::clear_has_availabletokens() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DccInfo::clear_availabletokens() {
  availabletokens_ = 0;
  clear_has_availabletokens();
}
inline ::google::protobuf::int32 DccInfo::availabletokens() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.availableTokens)
  return availabletokens_;
}
inline void DccInfo::set_availabletokens(::google::protobuf::int32 value) {
  set_has_availabletokens();
  availabletokens_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.availableTokens)
}

// optional int32 queuedPackets = 6;
inline bool DccInfo::has_queuedpackets() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DccInfo::set_has_queuedpackets() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DccInfo::clear_has_queuedpackets() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DccInfo::clear_queuedpackets() {
  queuedpackets_ = 0;
  clear_has_queuedpackets();
}
inline ::google::protobuf::int32 DccInfo::queuedpackets() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.queuedPackets)
  return queuedpackets_;
}
inline void DccInfo::set_queuedpackets(::google::protobuf::int32 value) {
  set_has_queuedpackets();
  queuedpackets_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.queuedPackets)
}

// optional int32 dccMechanism = 7;
inline bool DccInfo::has_dccmechanism() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DccInfo::set_has_dccmechanism() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DccInfo::clear_has_dccmechanism() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DccInfo::clear_dccmechanism() {
  dccmechanism_ = 0;
  clear_has_dccmechanism();
}
inline ::google::protobuf::int32 DccInfo::dccmechanism() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.dccMechanism)
  return dccmechanism_;
}
inline void DccInfo::set_dccmechanism(::google::protobuf::int32 value) {
  set_has_dccmechanism();
  dccmechanism_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.dccMechanism)
}

// optional double txPower = 8;
inline bool DccInfo::has_txpower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DccInfo::set_has_txpower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DccInfo::clear_has_txpower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DccInfo::clear_txpower() {
  txpower_ = 0;
  clear_has_txpower();
}
inline double DccInfo::txpower() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.txPower)
  return txpower_;
}
inline void DccInfo::set_txpower(double value) {
  set_has_txpower();
  txpower_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.txPower)
}

// optional double tokenInterval = 9;
inline bool DccInfo::has_tokeninterval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DccInfo::set_has_tokeninterval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DccInfo::clear_has_tokeninterval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DccInfo::clear_tokeninterval() {
  tokeninterval_ = 0;
  clear_has_tokeninterval();
}
inline double DccInfo::tokeninterval() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.tokenInterval)
  return tokeninterval_;
}
inline void DccInfo::set_tokeninterval(double value) {
  set_has_tokeninterval();
  tokeninterval_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.tokenInterval)
}

// optional double datarate = 10;
inline bool DccInfo::has_datarate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DccInfo::set_has_datarate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DccInfo::clear_has_datarate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DccInfo::clear_datarate() {
  datarate_ = 0;
  clear_has_datarate();
}
inline double DccInfo::datarate() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.datarate)
  return datarate_;
}
inline void DccInfo::set_datarate(double value) {
  set_has_datarate();
  datarate_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.datarate)
}

// optional double carrierSense = 11;
inline bool DccInfo::has_carriersense() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DccInfo::set_has_carriersense() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DccInfo::clear_has_carriersense() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DccInfo::clear_carriersense() {
  carriersense_ = 0;
  clear_has_carriersense();
}
inline double DccInfo::carriersense() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.carrierSense)
  return carriersense_;
}
inline void DccInfo::set_carriersense(double value) {
  set_has_carriersense();
  carriersense_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.carrierSense)
}

// optional int32 flushReqPackets = 12;
inline bool DccInfo::has_flushreqpackets() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DccInfo::set_has_flushreqpackets() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DccInfo::clear_has_flushreqpackets() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DccInfo::clear_flushreqpackets() {
  flushreqpackets_ = 0;
  clear_has_flushreqpackets();
}
inline ::google::protobuf::int32 DccInfo::flushreqpackets() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.flushReqPackets)
  return flushreqpackets_;
}
inline void DccInfo::set_flushreqpackets(::google::protobuf::int32 value) {
  set_has_flushreqpackets();
  flushreqpackets_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.flushReqPackets)
}

// optional int32 flushNotReqPackets = 13;
inline bool DccInfo::has_flushnotreqpackets() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DccInfo::set_has_flushnotreqpackets() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DccInfo::clear_has_flushnotreqpackets() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DccInfo::clear_flushnotreqpackets() {
  flushnotreqpackets_ = 0;
  clear_has_flushnotreqpackets();
}
inline ::google::protobuf::int32 DccInfo::flushnotreqpackets() const {
  // @@protoc_insertion_point(field_get:infoPackage.DccInfo.flushNotReqPackets)
  return flushnotreqpackets_;
}
inline void DccInfo::set_flushnotreqpackets(::google::protobuf::int32 value) {
  set_has_flushnotreqpackets();
  flushnotreqpackets_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.DccInfo.flushNotReqPackets)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace infoPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dccInfo_2eproto__INCLUDED
