// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ldmData.proto

#ifndef PROTOBUF_ldmData_2eproto__INCLUDED
#define PROTOBUF_ldmData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dataPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ldmData_2eproto();
void protobuf_AssignDesc_ldmData_2eproto();
void protobuf_ShutdownFile_ldmData_2eproto();

class LdmData;

enum LdmData_Type {
  LdmData_Type_CAM = 1,
  LdmData_Type_DENM = 2,
  LdmData_Type_GPS = 3,
  LdmData_Type_OBD2 = 4,
  LdmData_Type_dccInfo = 5,
  LdmData_Type_camInfo = 6
};
bool LdmData_Type_IsValid(int value);
const LdmData_Type LdmData_Type_Type_MIN = LdmData_Type_CAM;
const LdmData_Type LdmData_Type_Type_MAX = LdmData_Type_camInfo;
const int LdmData_Type_Type_ARRAYSIZE = LdmData_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LdmData_Type_descriptor();
inline const ::std::string& LdmData_Type_Name(LdmData_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LdmData_Type_descriptor(), value);
}
inline bool LdmData_Type_Parse(
    const ::std::string& name, LdmData_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LdmData_Type>(
    LdmData_Type_descriptor(), name, value);
}
// ===================================================================

class LdmData : public ::google::protobuf::Message {
 public:
  LdmData();
  virtual ~LdmData();

  LdmData(const LdmData& from);

  inline LdmData& operator=(const LdmData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LdmData& default_instance();

  void Swap(LdmData* other);

  // implements Message ----------------------------------------------

  LdmData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LdmData& from);
  void MergeFrom(const LdmData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LdmData_Type Type;
  static const Type CAM = LdmData_Type_CAM;
  static const Type DENM = LdmData_Type_DENM;
  static const Type GPS = LdmData_Type_GPS;
  static const Type OBD2 = LdmData_Type_OBD2;
  static const Type dccInfo = LdmData_Type_dccInfo;
  static const Type camInfo = LdmData_Type_camInfo;
  static inline bool Type_IsValid(int value) {
    return LdmData_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LdmData_Type_Type_MIN;
  static const Type Type_MAX =
    LdmData_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LdmData_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LdmData_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LdmData_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LdmData_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .dataPackage.LdmData.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::dataPackage::LdmData_Type type() const;
  inline void set_type(::dataPackage::LdmData_Type value);

  // repeated bytes data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data(int index) const;
  inline ::std::string* mutable_data(int index);
  inline void set_data(int index, const ::std::string& value);
  inline void set_data(int index, const char* value);
  inline void set_data(int index, const void* value, size_t size);
  inline ::std::string* add_data();
  inline void add_data(const ::std::string& value);
  inline void add_data(const char* value);
  inline void add_data(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // @@protoc_insertion_point(class_scope:dataPackage.LdmData)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  int type_;
  friend void  protobuf_AddDesc_ldmData_2eproto();
  friend void protobuf_AssignDesc_ldmData_2eproto();
  friend void protobuf_ShutdownFile_ldmData_2eproto();

  void InitAsDefaultInstance();
  static LdmData* default_instance_;
};
// ===================================================================


// ===================================================================

// LdmData

// required .dataPackage.LdmData.Type type = 1;
inline bool LdmData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LdmData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LdmData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LdmData::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::dataPackage::LdmData_Type LdmData::type() const {
  // @@protoc_insertion_point(field_get:dataPackage.LdmData.type)
  return static_cast< ::dataPackage::LdmData_Type >(type_);
}
inline void LdmData::set_type(::dataPackage::LdmData_Type value) {
  assert(::dataPackage::LdmData_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.LdmData.type)
}

// repeated bytes data = 2;
inline int LdmData::data_size() const {
  return data_.size();
}
inline void LdmData::clear_data() {
  data_.Clear();
}
inline const ::std::string& LdmData::data(int index) const {
  // @@protoc_insertion_point(field_get:dataPackage.LdmData.data)
  return data_.Get(index);
}
inline ::std::string* LdmData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:dataPackage.LdmData.data)
  return data_.Mutable(index);
}
inline void LdmData::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dataPackage.LdmData.data)
  data_.Mutable(index)->assign(value);
}
inline void LdmData::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dataPackage.LdmData.data)
}
inline void LdmData::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dataPackage.LdmData.data)
}
inline ::std::string* LdmData::add_data() {
  return data_.Add();
}
inline void LdmData::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dataPackage.LdmData.data)
}
inline void LdmData::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dataPackage.LdmData.data)
}
inline void LdmData::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dataPackage.LdmData.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LdmData::data() const {
  // @@protoc_insertion_point(field_list:dataPackage.LdmData.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LdmData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:dataPackage.LdmData.data)
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataPackage

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dataPackage::LdmData_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataPackage::LdmData_Type>() {
  return ::dataPackage::LdmData_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ldmData_2eproto__INCLUDED
