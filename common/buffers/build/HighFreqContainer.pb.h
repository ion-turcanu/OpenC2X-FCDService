// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HighFreqContainer.proto

#ifndef PROTOBUF_HighFreqContainer_2eproto__INCLUDED
#define PROTOBUF_HighFreqContainer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "BasicVehicleHighFreqContainer.pb.h"
#include "RsuHighFreqContainer.pb.h"
// @@protoc_insertion_point(includes)

namespace its {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_HighFreqContainer_2eproto();
void protobuf_AssignDesc_HighFreqContainer_2eproto();
void protobuf_ShutdownFile_HighFreqContainer_2eproto();

class HighFreqContainer;

enum HighFreqContainer_Type {
  HighFreqContainer_Type_BASIC_HIGH_FREQ_CONTAINER = 1,
  HighFreqContainer_Type_RSU_HIGH_FREQ_CONTAINER = 2
};
bool HighFreqContainer_Type_IsValid(int value);
const HighFreqContainer_Type HighFreqContainer_Type_Type_MIN = HighFreqContainer_Type_BASIC_HIGH_FREQ_CONTAINER;
const HighFreqContainer_Type HighFreqContainer_Type_Type_MAX = HighFreqContainer_Type_RSU_HIGH_FREQ_CONTAINER;
const int HighFreqContainer_Type_Type_ARRAYSIZE = HighFreqContainer_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* HighFreqContainer_Type_descriptor();
inline const ::std::string& HighFreqContainer_Type_Name(HighFreqContainer_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    HighFreqContainer_Type_descriptor(), value);
}
inline bool HighFreqContainer_Type_Parse(
    const ::std::string& name, HighFreqContainer_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HighFreqContainer_Type>(
    HighFreqContainer_Type_descriptor(), name, value);
}
// ===================================================================

class HighFreqContainer : public ::google::protobuf::Message {
 public:
  HighFreqContainer();
  virtual ~HighFreqContainer();

  HighFreqContainer(const HighFreqContainer& from);

  inline HighFreqContainer& operator=(const HighFreqContainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HighFreqContainer& default_instance();

  void Swap(HighFreqContainer* other);

  // implements Message ----------------------------------------------

  HighFreqContainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HighFreqContainer& from);
  void MergeFrom(const HighFreqContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HighFreqContainer_Type Type;
  static const Type BASIC_HIGH_FREQ_CONTAINER = HighFreqContainer_Type_BASIC_HIGH_FREQ_CONTAINER;
  static const Type RSU_HIGH_FREQ_CONTAINER = HighFreqContainer_Type_RSU_HIGH_FREQ_CONTAINER;
  static inline bool Type_IsValid(int value) {
    return HighFreqContainer_Type_IsValid(value);
  }
  static const Type Type_MIN =
    HighFreqContainer_Type_Type_MIN;
  static const Type Type_MAX =
    HighFreqContainer_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    HighFreqContainer_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return HighFreqContainer_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return HighFreqContainer_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return HighFreqContainer_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .its.HighFreqContainer.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::its::HighFreqContainer_Type type() const;
  inline void set_type(::its::HighFreqContainer_Type value);

  // optional .its.BasicVehicleHighFreqContainer basicVehicleHighFreqContainer = 2;
  inline bool has_basicvehiclehighfreqcontainer() const;
  inline void clear_basicvehiclehighfreqcontainer();
  static const int kBasicVehicleHighFreqContainerFieldNumber = 2;
  inline const ::its::BasicVehicleHighFreqContainer& basicvehiclehighfreqcontainer() const;
  inline ::its::BasicVehicleHighFreqContainer* mutable_basicvehiclehighfreqcontainer();
  inline ::its::BasicVehicleHighFreqContainer* release_basicvehiclehighfreqcontainer();
  inline void set_allocated_basicvehiclehighfreqcontainer(::its::BasicVehicleHighFreqContainer* basicvehiclehighfreqcontainer);

  // optional .its.RsuHighFreqContainer rsuHighFreqContainer = 3;
  inline bool has_rsuhighfreqcontainer() const;
  inline void clear_rsuhighfreqcontainer();
  static const int kRsuHighFreqContainerFieldNumber = 3;
  inline const ::its::RsuHighFreqContainer& rsuhighfreqcontainer() const;
  inline ::its::RsuHighFreqContainer* mutable_rsuhighfreqcontainer();
  inline ::its::RsuHighFreqContainer* release_rsuhighfreqcontainer();
  inline void set_allocated_rsuhighfreqcontainer(::its::RsuHighFreqContainer* rsuhighfreqcontainer);

  // @@protoc_insertion_point(class_scope:its.HighFreqContainer)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_basicvehiclehighfreqcontainer();
  inline void clear_has_basicvehiclehighfreqcontainer();
  inline void set_has_rsuhighfreqcontainer();
  inline void clear_has_rsuhighfreqcontainer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::its::BasicVehicleHighFreqContainer* basicvehiclehighfreqcontainer_;
  ::its::RsuHighFreqContainer* rsuhighfreqcontainer_;
  int type_;
  friend void  protobuf_AddDesc_HighFreqContainer_2eproto();
  friend void protobuf_AssignDesc_HighFreqContainer_2eproto();
  friend void protobuf_ShutdownFile_HighFreqContainer_2eproto();

  void InitAsDefaultInstance();
  static HighFreqContainer* default_instance_;
};
// ===================================================================


// ===================================================================

// HighFreqContainer

// required .its.HighFreqContainer.Type type = 1;
inline bool HighFreqContainer::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HighFreqContainer::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HighFreqContainer::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HighFreqContainer::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::its::HighFreqContainer_Type HighFreqContainer::type() const {
  // @@protoc_insertion_point(field_get:its.HighFreqContainer.type)
  return static_cast< ::its::HighFreqContainer_Type >(type_);
}
inline void HighFreqContainer::set_type(::its::HighFreqContainer_Type value) {
  assert(::its::HighFreqContainer_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:its.HighFreqContainer.type)
}

// optional .its.BasicVehicleHighFreqContainer basicVehicleHighFreqContainer = 2;
inline bool HighFreqContainer::has_basicvehiclehighfreqcontainer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HighFreqContainer::set_has_basicvehiclehighfreqcontainer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HighFreqContainer::clear_has_basicvehiclehighfreqcontainer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HighFreqContainer::clear_basicvehiclehighfreqcontainer() {
  if (basicvehiclehighfreqcontainer_ != NULL) basicvehiclehighfreqcontainer_->::its::BasicVehicleHighFreqContainer::Clear();
  clear_has_basicvehiclehighfreqcontainer();
}
inline const ::its::BasicVehicleHighFreqContainer& HighFreqContainer::basicvehiclehighfreqcontainer() const {
  // @@protoc_insertion_point(field_get:its.HighFreqContainer.basicVehicleHighFreqContainer)
  return basicvehiclehighfreqcontainer_ != NULL ? *basicvehiclehighfreqcontainer_ : *default_instance_->basicvehiclehighfreqcontainer_;
}
inline ::its::BasicVehicleHighFreqContainer* HighFreqContainer::mutable_basicvehiclehighfreqcontainer() {
  set_has_basicvehiclehighfreqcontainer();
  if (basicvehiclehighfreqcontainer_ == NULL) basicvehiclehighfreqcontainer_ = new ::its::BasicVehicleHighFreqContainer;
  // @@protoc_insertion_point(field_mutable:its.HighFreqContainer.basicVehicleHighFreqContainer)
  return basicvehiclehighfreqcontainer_;
}
inline ::its::BasicVehicleHighFreqContainer* HighFreqContainer::release_basicvehiclehighfreqcontainer() {
  clear_has_basicvehiclehighfreqcontainer();
  ::its::BasicVehicleHighFreqContainer* temp = basicvehiclehighfreqcontainer_;
  basicvehiclehighfreqcontainer_ = NULL;
  return temp;
}
inline void HighFreqContainer::set_allocated_basicvehiclehighfreqcontainer(::its::BasicVehicleHighFreqContainer* basicvehiclehighfreqcontainer) {
  delete basicvehiclehighfreqcontainer_;
  basicvehiclehighfreqcontainer_ = basicvehiclehighfreqcontainer;
  if (basicvehiclehighfreqcontainer) {
    set_has_basicvehiclehighfreqcontainer();
  } else {
    clear_has_basicvehiclehighfreqcontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.HighFreqContainer.basicVehicleHighFreqContainer)
}

// optional .its.RsuHighFreqContainer rsuHighFreqContainer = 3;
inline bool HighFreqContainer::has_rsuhighfreqcontainer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HighFreqContainer::set_has_rsuhighfreqcontainer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HighFreqContainer::clear_has_rsuhighfreqcontainer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HighFreqContainer::clear_rsuhighfreqcontainer() {
  if (rsuhighfreqcontainer_ != NULL) rsuhighfreqcontainer_->::its::RsuHighFreqContainer::Clear();
  clear_has_rsuhighfreqcontainer();
}
inline const ::its::RsuHighFreqContainer& HighFreqContainer::rsuhighfreqcontainer() const {
  // @@protoc_insertion_point(field_get:its.HighFreqContainer.rsuHighFreqContainer)
  return rsuhighfreqcontainer_ != NULL ? *rsuhighfreqcontainer_ : *default_instance_->rsuhighfreqcontainer_;
}
inline ::its::RsuHighFreqContainer* HighFreqContainer::mutable_rsuhighfreqcontainer() {
  set_has_rsuhighfreqcontainer();
  if (rsuhighfreqcontainer_ == NULL) rsuhighfreqcontainer_ = new ::its::RsuHighFreqContainer;
  // @@protoc_insertion_point(field_mutable:its.HighFreqContainer.rsuHighFreqContainer)
  return rsuhighfreqcontainer_;
}
inline ::its::RsuHighFreqContainer* HighFreqContainer::release_rsuhighfreqcontainer() {
  clear_has_rsuhighfreqcontainer();
  ::its::RsuHighFreqContainer* temp = rsuhighfreqcontainer_;
  rsuhighfreqcontainer_ = NULL;
  return temp;
}
inline void HighFreqContainer::set_allocated_rsuhighfreqcontainer(::its::RsuHighFreqContainer* rsuhighfreqcontainer) {
  delete rsuhighfreqcontainer_;
  rsuhighfreqcontainer_ = rsuhighfreqcontainer;
  if (rsuhighfreqcontainer) {
    set_has_rsuhighfreqcontainer();
  } else {
    clear_has_rsuhighfreqcontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.HighFreqContainer.rsuHighFreqContainer)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::its::HighFreqContainer_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::its::HighFreqContainer_Type>() {
  return ::its::HighFreqContainer_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HighFreqContainer_2eproto__INCLUDED
