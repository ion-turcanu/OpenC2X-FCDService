// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obd2.proto

#ifndef PROTOBUF_obd2_2eproto__INCLUDED
#define PROTOBUF_obd2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace obd2Package {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_obd2_2eproto();
void protobuf_AssignDesc_obd2_2eproto();
void protobuf_ShutdownFile_obd2_2eproto();

class OBD2;

// ===================================================================

class OBD2 : public ::google::protobuf::Message {
 public:
  OBD2();
  virtual ~OBD2();

  OBD2(const OBD2& from);

  inline OBD2& operator=(const OBD2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OBD2& default_instance();

  void Swap(OBD2* other);

  // implements Message ----------------------------------------------

  OBD2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OBD2& from);
  void MergeFrom(const OBD2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional double speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline double speed() const;
  inline void set_speed(double value);

  // optional int32 rpm = 3;
  inline bool has_rpm() const;
  inline void clear_rpm();
  static const int kRpmFieldNumber = 3;
  inline ::google::protobuf::int32 rpm() const;
  inline void set_rpm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:obd2Package.OBD2)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_rpm();
  inline void clear_has_rpm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  double speed_;
  ::google::protobuf::int32 rpm_;
  friend void  protobuf_AddDesc_obd2_2eproto();
  friend void protobuf_AssignDesc_obd2_2eproto();
  friend void protobuf_ShutdownFile_obd2_2eproto();

  void InitAsDefaultInstance();
  static OBD2* default_instance_;
};
// ===================================================================


// ===================================================================

// OBD2

// optional int64 time = 1;
inline bool OBD2::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OBD2::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OBD2::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OBD2::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 OBD2::time() const {
  // @@protoc_insertion_point(field_get:obd2Package.OBD2.time)
  return time_;
}
inline void OBD2::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:obd2Package.OBD2.time)
}

// optional double speed = 2;
inline bool OBD2::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OBD2::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OBD2::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OBD2::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double OBD2::speed() const {
  // @@protoc_insertion_point(field_get:obd2Package.OBD2.speed)
  return speed_;
}
inline void OBD2::set_speed(double value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:obd2Package.OBD2.speed)
}

// optional int32 rpm = 3;
inline bool OBD2::has_rpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OBD2::set_has_rpm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OBD2::clear_has_rpm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OBD2::clear_rpm() {
  rpm_ = 0;
  clear_has_rpm();
}
inline ::google::protobuf::int32 OBD2::rpm() const {
  // @@protoc_insertion_point(field_get:obd2Package.OBD2.rpm)
  return rpm_;
}
inline void OBD2::set_rpm(::google::protobuf::int32 value) {
  set_has_rpm();
  rpm_ = value;
  // @@protoc_insertion_point(field_set:obd2Package.OBD2.rpm)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace obd2Package

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_obd2_2eproto__INCLUDED
