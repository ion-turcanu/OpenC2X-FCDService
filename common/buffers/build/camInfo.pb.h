// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camInfo.proto

#ifndef PROTOBUF_camInfo_2eproto__INCLUDED
#define PROTOBUF_camInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace infoPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_camInfo_2eproto();
void protobuf_AssignDesc_camInfo_2eproto();
void protobuf_ShutdownFile_camInfo_2eproto();

class CamInfo;

// ===================================================================

class CamInfo : public ::google::protobuf::Message {
 public:
  CamInfo();
  virtual ~CamInfo();

  CamInfo(const CamInfo& from);

  inline CamInfo& operator=(const CamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CamInfo& default_instance();

  void Swap(CamInfo* other);

  // implements Message ----------------------------------------------

  CamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CamInfo& from);
  void MergeFrom(const CamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string triggerReason = 2;
  inline bool has_triggerreason() const;
  inline void clear_triggerreason();
  static const int kTriggerReasonFieldNumber = 2;
  inline const ::std::string& triggerreason() const;
  inline void set_triggerreason(const ::std::string& value);
  inline void set_triggerreason(const char* value);
  inline void set_triggerreason(const char* value, size_t size);
  inline ::std::string* mutable_triggerreason();
  inline ::std::string* release_triggerreason();
  inline void set_allocated_triggerreason(::std::string* triggerreason);

  // optional double delta = 3;
  inline bool has_delta() const;
  inline void clear_delta();
  static const int kDeltaFieldNumber = 3;
  inline double delta() const;
  inline void set_delta(double value);

  // @@protoc_insertion_point(class_scope:infoPackage.CamInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_triggerreason();
  inline void clear_has_triggerreason();
  inline void set_has_delta();
  inline void clear_has_delta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 time_;
  ::std::string* triggerreason_;
  double delta_;
  friend void  protobuf_AddDesc_camInfo_2eproto();
  friend void protobuf_AssignDesc_camInfo_2eproto();
  friend void protobuf_ShutdownFile_camInfo_2eproto();

  void InitAsDefaultInstance();
  static CamInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// CamInfo

// optional int64 time = 1;
inline bool CamInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CamInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CamInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CamInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 CamInfo::time() const {
  // @@protoc_insertion_point(field_get:infoPackage.CamInfo.time)
  return time_;
}
inline void CamInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.CamInfo.time)
}

// optional string triggerReason = 2;
inline bool CamInfo::has_triggerreason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CamInfo::set_has_triggerreason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CamInfo::clear_has_triggerreason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CamInfo::clear_triggerreason() {
  if (triggerreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggerreason_->clear();
  }
  clear_has_triggerreason();
}
inline const ::std::string& CamInfo::triggerreason() const {
  // @@protoc_insertion_point(field_get:infoPackage.CamInfo.triggerReason)
  return *triggerreason_;
}
inline void CamInfo::set_triggerreason(const ::std::string& value) {
  set_has_triggerreason();
  if (triggerreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggerreason_ = new ::std::string;
  }
  triggerreason_->assign(value);
  // @@protoc_insertion_point(field_set:infoPackage.CamInfo.triggerReason)
}
inline void CamInfo::set_triggerreason(const char* value) {
  set_has_triggerreason();
  if (triggerreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggerreason_ = new ::std::string;
  }
  triggerreason_->assign(value);
  // @@protoc_insertion_point(field_set_char:infoPackage.CamInfo.triggerReason)
}
inline void CamInfo::set_triggerreason(const char* value, size_t size) {
  set_has_triggerreason();
  if (triggerreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggerreason_ = new ::std::string;
  }
  triggerreason_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:infoPackage.CamInfo.triggerReason)
}
inline ::std::string* CamInfo::mutable_triggerreason() {
  set_has_triggerreason();
  if (triggerreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggerreason_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:infoPackage.CamInfo.triggerReason)
  return triggerreason_;
}
inline ::std::string* CamInfo::release_triggerreason() {
  clear_has_triggerreason();
  if (triggerreason_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = triggerreason_;
    triggerreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CamInfo::set_allocated_triggerreason(::std::string* triggerreason) {
  if (triggerreason_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggerreason_;
  }
  if (triggerreason) {
    set_has_triggerreason();
    triggerreason_ = triggerreason;
  } else {
    clear_has_triggerreason();
    triggerreason_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:infoPackage.CamInfo.triggerReason)
}

// optional double delta = 3;
inline bool CamInfo::has_delta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CamInfo::set_has_delta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CamInfo::clear_has_delta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CamInfo::clear_delta() {
  delta_ = 0;
  clear_has_delta();
}
inline double CamInfo::delta() const {
  // @@protoc_insertion_point(field_get:infoPackage.CamInfo.delta)
  return delta_;
}
inline void CamInfo::set_delta(double value) {
  set_has_delta();
  delta_ = value;
  // @@protoc_insertion_point(field_set:infoPackage.CamInfo.delta)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace infoPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_camInfo_2eproto__INCLUDED
