// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DENMManagementContainer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DENMManagementContainer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace its {

namespace {

const ::google::protobuf::Descriptor* DENMManagementContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DENMManagementContainer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DENMManagementContainer_2eproto() {
  protobuf_AddDesc_DENMManagementContainer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DENMManagementContainer.proto");
  GOOGLE_CHECK(file != NULL);
  DENMManagementContainer_descriptor_ = file->message_type(0);
  static const int DENMManagementContainer_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, stationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, sequencenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, detectiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, referencetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, semimajorconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, semiminorconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, semimajororientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, altitudeconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, validityduration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, stationtype_),
  };
  DENMManagementContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DENMManagementContainer_descriptor_,
      DENMManagementContainer::default_instance_,
      DENMManagementContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DENMManagementContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DENMManagementContainer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DENMManagementContainer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DENMManagementContainer_descriptor_, &DENMManagementContainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DENMManagementContainer_2eproto() {
  delete DENMManagementContainer::default_instance_;
  delete DENMManagementContainer_reflection_;
}

void protobuf_AddDesc_DENMManagementContainer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035DENMManagementContainer.proto\022\003its\"\314\002\n"
    "\027DENMManagementContainer\022\021\n\tstationID\030\001 "
    "\002(\004\022\026\n\016sequenceNumber\030\002 \002(\003\022\025\n\rdetection"
    "Time\030\003 \001(\003\022\025\n\rreferenceTime\030\004 \001(\003\022\020\n\010lat"
    "itude\030\005 \002(\003\022\021\n\tlongitude\030\006 \002(\003\022\033\n\023semiMa"
    "jorConfidence\030\007 \002(\003\022\033\n\023semiMinorConfiden"
    "ce\030\010 \002(\003\022\034\n\024semiMajorOrientation\030\t \002(\003\022\020"
    "\n\010altitude\030\n \002(\003\022\032\n\022altitudeConfidence\030\013"
    " \002(\003\022\030\n\020validityDuration\030\014 \001(\003\022\023\n\013statio"
    "nType\030\r \002(\003", 371);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DENMManagementContainer.proto", &protobuf_RegisterTypes);
  DENMManagementContainer::default_instance_ = new DENMManagementContainer();
  DENMManagementContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DENMManagementContainer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DENMManagementContainer_2eproto {
  StaticDescriptorInitializer_DENMManagementContainer_2eproto() {
    protobuf_AddDesc_DENMManagementContainer_2eproto();
  }
} static_descriptor_initializer_DENMManagementContainer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DENMManagementContainer::kStationIDFieldNumber;
const int DENMManagementContainer::kSequenceNumberFieldNumber;
const int DENMManagementContainer::kDetectionTimeFieldNumber;
const int DENMManagementContainer::kReferenceTimeFieldNumber;
const int DENMManagementContainer::kLatitudeFieldNumber;
const int DENMManagementContainer::kLongitudeFieldNumber;
const int DENMManagementContainer::kSemiMajorConfidenceFieldNumber;
const int DENMManagementContainer::kSemiMinorConfidenceFieldNumber;
const int DENMManagementContainer::kSemiMajorOrientationFieldNumber;
const int DENMManagementContainer::kAltitudeFieldNumber;
const int DENMManagementContainer::kAltitudeConfidenceFieldNumber;
const int DENMManagementContainer::kValidityDurationFieldNumber;
const int DENMManagementContainer::kStationTypeFieldNumber;
#endif  // !_MSC_VER

DENMManagementContainer::DENMManagementContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:its.DENMManagementContainer)
}

void DENMManagementContainer::InitAsDefaultInstance() {
}

DENMManagementContainer::DENMManagementContainer(const DENMManagementContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:its.DENMManagementContainer)
}

void DENMManagementContainer::SharedCtor() {
  _cached_size_ = 0;
  stationid_ = GOOGLE_ULONGLONG(0);
  sequencenumber_ = GOOGLE_LONGLONG(0);
  detectiontime_ = GOOGLE_LONGLONG(0);
  referencetime_ = GOOGLE_LONGLONG(0);
  latitude_ = GOOGLE_LONGLONG(0);
  longitude_ = GOOGLE_LONGLONG(0);
  semimajorconfidence_ = GOOGLE_LONGLONG(0);
  semiminorconfidence_ = GOOGLE_LONGLONG(0);
  semimajororientation_ = GOOGLE_LONGLONG(0);
  altitude_ = GOOGLE_LONGLONG(0);
  altitudeconfidence_ = GOOGLE_LONGLONG(0);
  validityduration_ = GOOGLE_LONGLONG(0);
  stationtype_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DENMManagementContainer::~DENMManagementContainer() {
  // @@protoc_insertion_point(destructor:its.DENMManagementContainer)
  SharedDtor();
}

void DENMManagementContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DENMManagementContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DENMManagementContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DENMManagementContainer_descriptor_;
}

const DENMManagementContainer& DENMManagementContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DENMManagementContainer_2eproto();
  return *default_instance_;
}

DENMManagementContainer* DENMManagementContainer::default_instance_ = NULL;

DENMManagementContainer* DENMManagementContainer::New() const {
  return new DENMManagementContainer;
}

void DENMManagementContainer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DENMManagementContainer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(stationid_, semiminorconfidence_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(semimajororientation_, stationtype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DENMManagementContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:its.DENMManagementContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stationID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stationid_)));
          set_has_stationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequenceNumber;
        break;
      }

      // required int64 sequenceNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_sequenceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequencenumber_)));
          set_has_sequencenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_detectionTime;
        break;
      }

      // optional int64 detectionTime = 3;
      case 3: {
        if (tag == 24) {
         parse_detectionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detectiontime_)));
          set_has_detectiontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_referenceTime;
        break;
      }

      // optional int64 referenceTime = 4;
      case 4: {
        if (tag == 32) {
         parse_referenceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &referencetime_)));
          set_has_referencetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latitude;
        break;
      }

      // required int64 latitude = 5;
      case 5: {
        if (tag == 40) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_longitude;
        break;
      }

      // required int64 longitude = 6;
      case 6: {
        if (tag == 48) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_semiMajorConfidence;
        break;
      }

      // required int64 semiMajorConfidence = 7;
      case 7: {
        if (tag == 56) {
         parse_semiMajorConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &semimajorconfidence_)));
          set_has_semimajorconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_semiMinorConfidence;
        break;
      }

      // required int64 semiMinorConfidence = 8;
      case 8: {
        if (tag == 64) {
         parse_semiMinorConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &semiminorconfidence_)));
          set_has_semiminorconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_semiMajorOrientation;
        break;
      }

      // required int64 semiMajorOrientation = 9;
      case 9: {
        if (tag == 72) {
         parse_semiMajorOrientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &semimajororientation_)));
          set_has_semimajororientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_altitude;
        break;
      }

      // required int64 altitude = 10;
      case 10: {
        if (tag == 80) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_altitudeConfidence;
        break;
      }

      // required int64 altitudeConfidence = 11;
      case 11: {
        if (tag == 88) {
         parse_altitudeConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &altitudeconfidence_)));
          set_has_altitudeconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_validityDuration;
        break;
      }

      // optional int64 validityDuration = 12;
      case 12: {
        if (tag == 96) {
         parse_validityDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validityduration_)));
          set_has_validityduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stationType;
        break;
      }

      // required int64 stationType = 13;
      case 13: {
        if (tag == 104) {
         parse_stationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stationtype_)));
          set_has_stationtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:its.DENMManagementContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:its.DENMManagementContainer)
  return false;
#undef DO_
}

void DENMManagementContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:its.DENMManagementContainer)
  // required uint64 stationID = 1;
  if (has_stationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stationid(), output);
  }

  // required int64 sequenceNumber = 2;
  if (has_sequencenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->sequencenumber(), output);
  }

  // optional int64 detectionTime = 3;
  if (has_detectiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->detectiontime(), output);
  }

  // optional int64 referenceTime = 4;
  if (has_referencetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->referencetime(), output);
  }

  // required int64 latitude = 5;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->latitude(), output);
  }

  // required int64 longitude = 6;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->longitude(), output);
  }

  // required int64 semiMajorConfidence = 7;
  if (has_semimajorconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->semimajorconfidence(), output);
  }

  // required int64 semiMinorConfidence = 8;
  if (has_semiminorconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->semiminorconfidence(), output);
  }

  // required int64 semiMajorOrientation = 9;
  if (has_semimajororientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->semimajororientation(), output);
  }

  // required int64 altitude = 10;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->altitude(), output);
  }

  // required int64 altitudeConfidence = 11;
  if (has_altitudeconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->altitudeconfidence(), output);
  }

  // optional int64 validityDuration = 12;
  if (has_validityduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->validityduration(), output);
  }

  // required int64 stationType = 13;
  if (has_stationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->stationtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:its.DENMManagementContainer)
}

::google::protobuf::uint8* DENMManagementContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:its.DENMManagementContainer)
  // required uint64 stationID = 1;
  if (has_stationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stationid(), target);
  }

  // required int64 sequenceNumber = 2;
  if (has_sequencenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->sequencenumber(), target);
  }

  // optional int64 detectionTime = 3;
  if (has_detectiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->detectiontime(), target);
  }

  // optional int64 referenceTime = 4;
  if (has_referencetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->referencetime(), target);
  }

  // required int64 latitude = 5;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->latitude(), target);
  }

  // required int64 longitude = 6;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->longitude(), target);
  }

  // required int64 semiMajorConfidence = 7;
  if (has_semimajorconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->semimajorconfidence(), target);
  }

  // required int64 semiMinorConfidence = 8;
  if (has_semiminorconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->semiminorconfidence(), target);
  }

  // required int64 semiMajorOrientation = 9;
  if (has_semimajororientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->semimajororientation(), target);
  }

  // required int64 altitude = 10;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->altitude(), target);
  }

  // required int64 altitudeConfidence = 11;
  if (has_altitudeconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->altitudeconfidence(), target);
  }

  // optional int64 validityDuration = 12;
  if (has_validityduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->validityduration(), target);
  }

  // required int64 stationType = 13;
  if (has_stationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->stationtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:its.DENMManagementContainer)
  return target;
}

int DENMManagementContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 stationID = 1;
    if (has_stationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stationid());
    }

    // required int64 sequenceNumber = 2;
    if (has_sequencenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sequencenumber());
    }

    // optional int64 detectionTime = 3;
    if (has_detectiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->detectiontime());
    }

    // optional int64 referenceTime = 4;
    if (has_referencetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->referencetime());
    }

    // required int64 latitude = 5;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->latitude());
    }

    // required int64 longitude = 6;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longitude());
    }

    // required int64 semiMajorConfidence = 7;
    if (has_semimajorconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->semimajorconfidence());
    }

    // required int64 semiMinorConfidence = 8;
    if (has_semiminorconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->semiminorconfidence());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 semiMajorOrientation = 9;
    if (has_semimajororientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->semimajororientation());
    }

    // required int64 altitude = 10;
    if (has_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->altitude());
    }

    // required int64 altitudeConfidence = 11;
    if (has_altitudeconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->altitudeconfidence());
    }

    // optional int64 validityDuration = 12;
    if (has_validityduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->validityduration());
    }

    // required int64 stationType = 13;
    if (has_stationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stationtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DENMManagementContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DENMManagementContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DENMManagementContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DENMManagementContainer::MergeFrom(const DENMManagementContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stationid()) {
      set_stationid(from.stationid());
    }
    if (from.has_sequencenumber()) {
      set_sequencenumber(from.sequencenumber());
    }
    if (from.has_detectiontime()) {
      set_detectiontime(from.detectiontime());
    }
    if (from.has_referencetime()) {
      set_referencetime(from.referencetime());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_semimajorconfidence()) {
      set_semimajorconfidence(from.semimajorconfidence());
    }
    if (from.has_semiminorconfidence()) {
      set_semiminorconfidence(from.semiminorconfidence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_semimajororientation()) {
      set_semimajororientation(from.semimajororientation());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_altitudeconfidence()) {
      set_altitudeconfidence(from.altitudeconfidence());
    }
    if (from.has_validityduration()) {
      set_validityduration(from.validityduration());
    }
    if (from.has_stationtype()) {
      set_stationtype(from.stationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DENMManagementContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DENMManagementContainer::CopyFrom(const DENMManagementContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DENMManagementContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x000017f3) != 0x000017f3) return false;

  return true;
}

void DENMManagementContainer::Swap(DENMManagementContainer* other) {
  if (other != this) {
    std::swap(stationid_, other->stationid_);
    std::swap(sequencenumber_, other->sequencenumber_);
    std::swap(detectiontime_, other->detectiontime_);
    std::swap(referencetime_, other->referencetime_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(semimajorconfidence_, other->semimajorconfidence_);
    std::swap(semiminorconfidence_, other->semiminorconfidence_);
    std::swap(semimajororientation_, other->semimajororientation_);
    std::swap(altitude_, other->altitude_);
    std::swap(altitudeconfidence_, other->altitudeconfidence_);
    std::swap(validityduration_, other->validityduration_);
    std::swap(stationtype_, other->stationtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DENMManagementContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DENMManagementContainer_descriptor_;
  metadata.reflection = DENMManagementContainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

// @@protoc_insertion_point(global_scope)
