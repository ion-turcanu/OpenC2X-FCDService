// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#ifndef PROTOBUF_gps_2eproto__INCLUDED
#define PROTOBUF_gps_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gpsPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gps_2eproto();
void protobuf_AssignDesc_gps_2eproto();
void protobuf_ShutdownFile_gps_2eproto();

class GPS;

// ===================================================================

class GPS : public ::google::protobuf::Message {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS& default_instance();

  void Swap(GPS* other);

  // implements Message ----------------------------------------------

  GPS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // optional double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // optional double altitude = 3;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional double epx = 4;
  inline bool has_epx() const;
  inline void clear_epx();
  static const int kEpxFieldNumber = 4;
  inline double epx() const;
  inline void set_epx(double value);

  // optional double epy = 5;
  inline bool has_epy() const;
  inline void clear_epy();
  static const int kEpyFieldNumber = 5;
  inline double epy() const;
  inline void set_epy(double value);

  // optional int64 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional int64 online = 7;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 7;
  inline ::google::protobuf::int64 online() const;
  inline void set_online(::google::protobuf::int64 value);

  // optional int32 satellites = 8;
  inline bool has_satellites() const;
  inline void clear_satellites();
  static const int kSatellitesFieldNumber = 8;
  inline ::google::protobuf::int32 satellites() const;
  inline void set_satellites(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gpsPackage.GPS)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_epx();
  inline void clear_has_epx();
  inline void set_has_epy();
  inline void clear_has_epy();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_online();
  inline void clear_has_online();
  inline void set_has_satellites();
  inline void clear_has_satellites();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  double epx_;
  double epy_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int64 online_;
  ::google::protobuf::int32 satellites_;
  friend void  protobuf_AddDesc_gps_2eproto();
  friend void protobuf_AssignDesc_gps_2eproto();
  friend void protobuf_ShutdownFile_gps_2eproto();

  void InitAsDefaultInstance();
  static GPS* default_instance_;
};
// ===================================================================


// ===================================================================

// GPS

// optional double latitude = 1;
inline bool GPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double GPS::latitude() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.latitude)
  return latitude_;
}
inline void GPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.latitude)
}

// optional double longitude = 2;
inline bool GPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double GPS::longitude() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.longitude)
  return longitude_;
}
inline void GPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.longitude)
}

// optional double altitude = 3;
inline bool GPS::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPS::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double GPS::altitude() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.altitude)
  return altitude_;
}
inline void GPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.altitude)
}

// optional double epx = 4;
inline bool GPS::has_epx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPS::set_has_epx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPS::clear_has_epx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPS::clear_epx() {
  epx_ = 0;
  clear_has_epx();
}
inline double GPS::epx() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.epx)
  return epx_;
}
inline void GPS::set_epx(double value) {
  set_has_epx();
  epx_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.epx)
}

// optional double epy = 5;
inline bool GPS::has_epy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPS::set_has_epy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPS::clear_has_epy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPS::clear_epy() {
  epy_ = 0;
  clear_has_epy();
}
inline double GPS::epy() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.epy)
  return epy_;
}
inline void GPS::set_epy(double value) {
  set_has_epy();
  epy_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.epy)
}

// optional int64 time = 6;
inline bool GPS::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPS::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPS::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPS::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 GPS::time() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.time)
  return time_;
}
inline void GPS::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.time)
}

// optional int64 online = 7;
inline bool GPS::has_online() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPS::set_has_online() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPS::clear_has_online() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPS::clear_online() {
  online_ = GOOGLE_LONGLONG(0);
  clear_has_online();
}
inline ::google::protobuf::int64 GPS::online() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.online)
  return online_;
}
inline void GPS::set_online(::google::protobuf::int64 value) {
  set_has_online();
  online_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.online)
}

// optional int32 satellites = 8;
inline bool GPS::has_satellites() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GPS::set_has_satellites() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GPS::clear_has_satellites() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GPS::clear_satellites() {
  satellites_ = 0;
  clear_has_satellites();
}
inline ::google::protobuf::int32 GPS::satellites() const {
  // @@protoc_insertion_point(field_get:gpsPackage.GPS.satellites)
  return satellites_;
}
inline void GPS::set_satellites(::google::protobuf::int32 value) {
  set_has_satellites();
  satellites_ = value;
  // @@protoc_insertion_point(field_set:gpsPackage.GPS.satellites)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpsPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gps_2eproto__INCLUDED
