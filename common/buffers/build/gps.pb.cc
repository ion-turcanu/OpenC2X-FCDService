// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gps.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gpsPackage {

namespace {

const ::google::protobuf::Descriptor* GPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPS_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gps_2eproto() {
  protobuf_AddDesc_gps_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gps.proto");
  GOOGLE_CHECK(file != NULL);
  GPS_descriptor_ = file->message_type(0);
  static const int GPS_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, epx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, epy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, satellites_),
  };
  GPS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPS_descriptor_,
      GPS::default_instance_,
      GPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPS));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gps_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPS_descriptor_, &GPS::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gps_2eproto() {
  delete GPS::default_instance_;
  delete GPS_reflection_;
}

void protobuf_AddDesc_gps_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tgps.proto\022\ngpsPackage\"\210\001\n\003GPS\022\020\n\010latit"
    "ude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010altitude"
    "\030\003 \001(\001\022\013\n\003epx\030\004 \001(\001\022\013\n\003epy\030\005 \001(\001\022\014\n\004time"
    "\030\006 \001(\003\022\016\n\006online\030\007 \001(\003\022\022\n\nsatellites\030\010 \001"
    "(\005", 162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gps.proto", &protobuf_RegisterTypes);
  GPS::default_instance_ = new GPS();
  GPS::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gps_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gps_2eproto {
  StaticDescriptorInitializer_gps_2eproto() {
    protobuf_AddDesc_gps_2eproto();
  }
} static_descriptor_initializer_gps_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GPS::kLatitudeFieldNumber;
const int GPS::kLongitudeFieldNumber;
const int GPS::kAltitudeFieldNumber;
const int GPS::kEpxFieldNumber;
const int GPS::kEpyFieldNumber;
const int GPS::kTimeFieldNumber;
const int GPS::kOnlineFieldNumber;
const int GPS::kSatellitesFieldNumber;
#endif  // !_MSC_VER

GPS::GPS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gpsPackage.GPS)
}

void GPS::InitAsDefaultInstance() {
}

GPS::GPS(const GPS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gpsPackage.GPS)
}

void GPS::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  epx_ = 0;
  epy_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  online_ = GOOGLE_LONGLONG(0);
  satellites_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPS::~GPS() {
  // @@protoc_insertion_point(destructor:gpsPackage.GPS)
  SharedDtor();
}

void GPS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPS_descriptor_;
}

const GPS& GPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gps_2eproto();
  return *default_instance_;
}

GPS* GPS::default_instance_ = NULL;

GPS* GPS::New() const {
  return new GPS;
}

void GPS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, satellites_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gpsPackage.GPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }

      // optional double altitude = 3;
      case 3: {
        if (tag == 25) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_epx;
        break;
      }

      // optional double epx = 4;
      case 4: {
        if (tag == 33) {
         parse_epx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epx_)));
          set_has_epx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_epy;
        break;
      }

      // optional double epy = 5;
      case 5: {
        if (tag == 41) {
         parse_epy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epy_)));
          set_has_epy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional int64 time = 6;
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_online;
        break;
      }

      // optional int64 online = 7;
      case 7: {
        if (tag == 56) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_satellites;
        break;
      }

      // optional int32 satellites = 8;
      case 8: {
        if (tag == 64) {
         parse_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellites_)));
          set_has_satellites();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gpsPackage.GPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gpsPackage.GPS)
  return false;
#undef DO_
}

void GPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gpsPackage.GPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // optional double epx = 4;
  if (has_epx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->epx(), output);
  }

  // optional double epy = 5;
  if (has_epy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->epy(), output);
  }

  // optional int64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->time(), output);
  }

  // optional int64 online = 7;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->online(), output);
  }

  // optional int32 satellites = 8;
  if (has_satellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->satellites(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gpsPackage.GPS)
}

::google::protobuf::uint8* GPS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gpsPackage.GPS)
  // optional double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  // optional double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // optional double epx = 4;
  if (has_epx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->epx(), target);
  }

  // optional double epy = 5;
  if (has_epy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->epy(), target);
  }

  // optional int64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->time(), target);
  }

  // optional int64 online = 7;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->online(), target);
  }

  // optional int32 satellites = 8;
  if (has_satellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->satellites(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gpsPackage.GPS)
  return target;
}

int GPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double epx = 4;
    if (has_epx()) {
      total_size += 1 + 8;
    }

    // optional double epy = 5;
    if (has_epy()) {
      total_size += 1 + 8;
    }

    // optional int64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int64 online = 7;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->online());
    }

    // optional int32 satellites = 8;
    if (has_satellites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellites());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPS::MergeFrom(const GPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_epx()) {
      set_epx(from.epx());
    }
    if (from.has_epy()) {
      set_epy(from.epy());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_satellites()) {
      set_satellites(from.satellites());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS::CopyFrom(const GPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS::IsInitialized() const {

  return true;
}

void GPS::Swap(GPS* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(epx_, other->epx_);
    std::swap(epy_, other->epy_);
    std::swap(time_, other->time_);
    std::swap(online_, other->online_);
    std::swap(satellites_, other->satellites_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPS_descriptor_;
  metadata.reflection = GPS_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gpsPackage

// @@protoc_insertion_point(global_scope)
