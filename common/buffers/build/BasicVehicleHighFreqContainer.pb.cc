// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BasicVehicleHighFreqContainer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BasicVehicleHighFreqContainer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace its {

namespace {

const ::google::protobuf::Descriptor* BasicVehicleHighFreqContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicVehicleHighFreqContainer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BasicVehicleHighFreqContainer_2eproto() {
  protobuf_AddDesc_BasicVehicleHighFreqContainer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BasicVehicleHighFreqContainer.proto");
  GOOGLE_CHECK(file != NULL);
  BasicVehicleHighFreqContainer_descriptor_ = file->message_type(0);
  static const int BasicVehicleHighFreqContainer_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, headingconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, speedconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, drivedirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, vehiclelength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, vehiclelengthconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, vehiclewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, longitudinalacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, longitudinalaccelerationconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, curvature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, curvatureconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, curvaturecalcmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, yawrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, yawrateconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, accelerationcontrol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, laneposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, steeringwheelangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, steeringwheelangleconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, lateralacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, lateralaccelerationconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, verticalacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, verticalaccelerationconfidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, performanceclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, protectedzonelatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, protectedzonelongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, cendsrctollingzoneid_),
  };
  BasicVehicleHighFreqContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BasicVehicleHighFreqContainer_descriptor_,
      BasicVehicleHighFreqContainer::default_instance_,
      BasicVehicleHighFreqContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicVehicleHighFreqContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BasicVehicleHighFreqContainer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BasicVehicleHighFreqContainer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BasicVehicleHighFreqContainer_descriptor_, &BasicVehicleHighFreqContainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BasicVehicleHighFreqContainer_2eproto() {
  delete BasicVehicleHighFreqContainer::default_instance_;
  delete BasicVehicleHighFreqContainer_reflection_;
}

void protobuf_AddDesc_BasicVehicleHighFreqContainer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#BasicVehicleHighFreqContainer.proto\022\003i"
    "ts\"\224\006\n\035BasicVehicleHighFreqContainer\022\017\n\007"
    "heading\030\001 \002(\003\022\031\n\021headingConfidence\030\002 \002(\003"
    "\022\r\n\005speed\030\003 \002(\003\022\027\n\017speedConfidence\030\004 \002(\003"
    "\022\026\n\016driveDirection\030\005 \002(\003\022\025\n\rvehicleLengt"
    "h\030\006 \002(\003\022\037\n\027vehicleLengthConfidence\030\007 \002(\003"
    "\022\024\n\014vehicleWidth\030\010 \002(\003\022 \n\030longitudinalAc"
    "celeration\030\t \002(\003\022*\n\"longitudinalAccelera"
    "tionConfidence\030\n \002(\003\022\021\n\tcurvature\030\013 \002(\003\022"
    "\033\n\023curvatureConfidence\030\014 \002(\003\022\031\n\021curvatur"
    "eCalcMode\030\r \002(\003\022\017\n\007yawRate\030\016 \002(\003\022\031\n\021yawR"
    "ateConfidence\030\017 \002(\003\022\033\n\023accelerationContr"
    "ol\030\020 \001(\003\022\024\n\014lanePosition\030\021 \001(\003\022\032\n\022steeri"
    "ngWheelAngle\030\022 \001(\003\022$\n\034steeringWheelAngle"
    "Confidence\030\023 \001(\003\022\033\n\023lateralAcceleration\030"
    "\024 \001(\003\022%\n\035lateralAccelerationConfidence\030\025"
    " \001(\003\022\034\n\024verticalAcceleration\030\026 \001(\003\022&\n\036ve"
    "rticalAccelerationConfidence\030\027 \001(\003\022\030\n\020pe"
    "rformanceClass\030\030 \001(\003\022\035\n\025protectedZoneLat"
    "itude\030\031 \001(\003\022\036\n\026protectedZoneLongitude\030\032 "
    "\001(\003\022\034\n\024cenDsrcTollingZoneId\030\033 \001(\003", 833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BasicVehicleHighFreqContainer.proto", &protobuf_RegisterTypes);
  BasicVehicleHighFreqContainer::default_instance_ = new BasicVehicleHighFreqContainer();
  BasicVehicleHighFreqContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BasicVehicleHighFreqContainer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BasicVehicleHighFreqContainer_2eproto {
  StaticDescriptorInitializer_BasicVehicleHighFreqContainer_2eproto() {
    protobuf_AddDesc_BasicVehicleHighFreqContainer_2eproto();
  }
} static_descriptor_initializer_BasicVehicleHighFreqContainer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BasicVehicleHighFreqContainer::kHeadingFieldNumber;
const int BasicVehicleHighFreqContainer::kHeadingConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kSpeedFieldNumber;
const int BasicVehicleHighFreqContainer::kSpeedConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kDriveDirectionFieldNumber;
const int BasicVehicleHighFreqContainer::kVehicleLengthFieldNumber;
const int BasicVehicleHighFreqContainer::kVehicleLengthConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kVehicleWidthFieldNumber;
const int BasicVehicleHighFreqContainer::kLongitudinalAccelerationFieldNumber;
const int BasicVehicleHighFreqContainer::kLongitudinalAccelerationConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kCurvatureFieldNumber;
const int BasicVehicleHighFreqContainer::kCurvatureConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kCurvatureCalcModeFieldNumber;
const int BasicVehicleHighFreqContainer::kYawRateFieldNumber;
const int BasicVehicleHighFreqContainer::kYawRateConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kAccelerationControlFieldNumber;
const int BasicVehicleHighFreqContainer::kLanePositionFieldNumber;
const int BasicVehicleHighFreqContainer::kSteeringWheelAngleFieldNumber;
const int BasicVehicleHighFreqContainer::kSteeringWheelAngleConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kLateralAccelerationFieldNumber;
const int BasicVehicleHighFreqContainer::kLateralAccelerationConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kVerticalAccelerationFieldNumber;
const int BasicVehicleHighFreqContainer::kVerticalAccelerationConfidenceFieldNumber;
const int BasicVehicleHighFreqContainer::kPerformanceClassFieldNumber;
const int BasicVehicleHighFreqContainer::kProtectedZoneLatitudeFieldNumber;
const int BasicVehicleHighFreqContainer::kProtectedZoneLongitudeFieldNumber;
const int BasicVehicleHighFreqContainer::kCenDsrcTollingZoneIdFieldNumber;
#endif  // !_MSC_VER

BasicVehicleHighFreqContainer::BasicVehicleHighFreqContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:its.BasicVehicleHighFreqContainer)
}

void BasicVehicleHighFreqContainer::InitAsDefaultInstance() {
}

BasicVehicleHighFreqContainer::BasicVehicleHighFreqContainer(const BasicVehicleHighFreqContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:its.BasicVehicleHighFreqContainer)
}

void BasicVehicleHighFreqContainer::SharedCtor() {
  _cached_size_ = 0;
  heading_ = GOOGLE_LONGLONG(0);
  headingconfidence_ = GOOGLE_LONGLONG(0);
  speed_ = GOOGLE_LONGLONG(0);
  speedconfidence_ = GOOGLE_LONGLONG(0);
  drivedirection_ = GOOGLE_LONGLONG(0);
  vehiclelength_ = GOOGLE_LONGLONG(0);
  vehiclelengthconfidence_ = GOOGLE_LONGLONG(0);
  vehiclewidth_ = GOOGLE_LONGLONG(0);
  longitudinalacceleration_ = GOOGLE_LONGLONG(0);
  longitudinalaccelerationconfidence_ = GOOGLE_LONGLONG(0);
  curvature_ = GOOGLE_LONGLONG(0);
  curvatureconfidence_ = GOOGLE_LONGLONG(0);
  curvaturecalcmode_ = GOOGLE_LONGLONG(0);
  yawrate_ = GOOGLE_LONGLONG(0);
  yawrateconfidence_ = GOOGLE_LONGLONG(0);
  accelerationcontrol_ = GOOGLE_LONGLONG(0);
  laneposition_ = GOOGLE_LONGLONG(0);
  steeringwheelangle_ = GOOGLE_LONGLONG(0);
  steeringwheelangleconfidence_ = GOOGLE_LONGLONG(0);
  lateralacceleration_ = GOOGLE_LONGLONG(0);
  lateralaccelerationconfidence_ = GOOGLE_LONGLONG(0);
  verticalacceleration_ = GOOGLE_LONGLONG(0);
  verticalaccelerationconfidence_ = GOOGLE_LONGLONG(0);
  performanceclass_ = GOOGLE_LONGLONG(0);
  protectedzonelatitude_ = GOOGLE_LONGLONG(0);
  protectedzonelongitude_ = GOOGLE_LONGLONG(0);
  cendsrctollingzoneid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicVehicleHighFreqContainer::~BasicVehicleHighFreqContainer() {
  // @@protoc_insertion_point(destructor:its.BasicVehicleHighFreqContainer)
  SharedDtor();
}

void BasicVehicleHighFreqContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicVehicleHighFreqContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicVehicleHighFreqContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicVehicleHighFreqContainer_descriptor_;
}

const BasicVehicleHighFreqContainer& BasicVehicleHighFreqContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BasicVehicleHighFreqContainer_2eproto();
  return *default_instance_;
}

BasicVehicleHighFreqContainer* BasicVehicleHighFreqContainer::default_instance_ = NULL;

BasicVehicleHighFreqContainer* BasicVehicleHighFreqContainer::New() const {
  return new BasicVehicleHighFreqContainer;
}

void BasicVehicleHighFreqContainer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BasicVehicleHighFreqContainer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(heading_, vehiclewidth_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(longitudinalacceleration_, accelerationcontrol_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(laneposition_, performanceclass_);
  }
  ZR_(protectedzonelatitude_, cendsrctollingzoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BasicVehicleHighFreqContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:its.BasicVehicleHighFreqContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 heading = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_headingConfidence;
        break;
      }

      // required int64 headingConfidence = 2;
      case 2: {
        if (tag == 16) {
         parse_headingConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &headingconfidence_)));
          set_has_headingconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_speed;
        break;
      }

      // required int64 speed = 3;
      case 3: {
        if (tag == 24) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_speedConfidence;
        break;
      }

      // required int64 speedConfidence = 4;
      case 4: {
        if (tag == 32) {
         parse_speedConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &speedconfidence_)));
          set_has_speedconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_driveDirection;
        break;
      }

      // required int64 driveDirection = 5;
      case 5: {
        if (tag == 40) {
         parse_driveDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &drivedirection_)));
          set_has_drivedirection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_vehicleLength;
        break;
      }

      // required int64 vehicleLength = 6;
      case 6: {
        if (tag == 48) {
         parse_vehicleLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehiclelength_)));
          set_has_vehiclelength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_vehicleLengthConfidence;
        break;
      }

      // required int64 vehicleLengthConfidence = 7;
      case 7: {
        if (tag == 56) {
         parse_vehicleLengthConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehiclelengthconfidence_)));
          set_has_vehiclelengthconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vehicleWidth;
        break;
      }

      // required int64 vehicleWidth = 8;
      case 8: {
        if (tag == 64) {
         parse_vehicleWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehiclewidth_)));
          set_has_vehiclewidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_longitudinalAcceleration;
        break;
      }

      // required int64 longitudinalAcceleration = 9;
      case 9: {
        if (tag == 72) {
         parse_longitudinalAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longitudinalacceleration_)));
          set_has_longitudinalacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_longitudinalAccelerationConfidence;
        break;
      }

      // required int64 longitudinalAccelerationConfidence = 10;
      case 10: {
        if (tag == 80) {
         parse_longitudinalAccelerationConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longitudinalaccelerationconfidence_)));
          set_has_longitudinalaccelerationconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curvature;
        break;
      }

      // required int64 curvature = 11;
      case 11: {
        if (tag == 88) {
         parse_curvature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curvature_)));
          set_has_curvature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curvatureConfidence;
        break;
      }

      // required int64 curvatureConfidence = 12;
      case 12: {
        if (tag == 96) {
         parse_curvatureConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curvatureconfidence_)));
          set_has_curvatureconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_curvatureCalcMode;
        break;
      }

      // required int64 curvatureCalcMode = 13;
      case 13: {
        if (tag == 104) {
         parse_curvatureCalcMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curvaturecalcmode_)));
          set_has_curvaturecalcmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_yawRate;
        break;
      }

      // required int64 yawRate = 14;
      case 14: {
        if (tag == 112) {
         parse_yawRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yawrate_)));
          set_has_yawrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_yawRateConfidence;
        break;
      }

      // required int64 yawRateConfidence = 15;
      case 15: {
        if (tag == 120) {
         parse_yawRateConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &yawrateconfidence_)));
          set_has_yawrateconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_accelerationControl;
        break;
      }

      // optional int64 accelerationControl = 16;
      case 16: {
        if (tag == 128) {
         parse_accelerationControl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &accelerationcontrol_)));
          set_has_accelerationcontrol();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_lanePosition;
        break;
      }

      // optional int64 lanePosition = 17;
      case 17: {
        if (tag == 136) {
         parse_lanePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &laneposition_)));
          set_has_laneposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_steeringWheelAngle;
        break;
      }

      // optional int64 steeringWheelAngle = 18;
      case 18: {
        if (tag == 144) {
         parse_steeringWheelAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &steeringwheelangle_)));
          set_has_steeringwheelangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_steeringWheelAngleConfidence;
        break;
      }

      // optional int64 steeringWheelAngleConfidence = 19;
      case 19: {
        if (tag == 152) {
         parse_steeringWheelAngleConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &steeringwheelangleconfidence_)));
          set_has_steeringwheelangleconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_lateralAcceleration;
        break;
      }

      // optional int64 lateralAcceleration = 20;
      case 20: {
        if (tag == 160) {
         parse_lateralAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lateralacceleration_)));
          set_has_lateralacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_lateralAccelerationConfidence;
        break;
      }

      // optional int64 lateralAccelerationConfidence = 21;
      case 21: {
        if (tag == 168) {
         parse_lateralAccelerationConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lateralaccelerationconfidence_)));
          set_has_lateralaccelerationconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_verticalAcceleration;
        break;
      }

      // optional int64 verticalAcceleration = 22;
      case 22: {
        if (tag == 176) {
         parse_verticalAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &verticalacceleration_)));
          set_has_verticalacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_verticalAccelerationConfidence;
        break;
      }

      // optional int64 verticalAccelerationConfidence = 23;
      case 23: {
        if (tag == 184) {
         parse_verticalAccelerationConfidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &verticalaccelerationconfidence_)));
          set_has_verticalaccelerationconfidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_performanceClass;
        break;
      }

      // optional int64 performanceClass = 24;
      case 24: {
        if (tag == 192) {
         parse_performanceClass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &performanceclass_)));
          set_has_performanceclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_protectedZoneLatitude;
        break;
      }

      // optional int64 protectedZoneLatitude = 25;
      case 25: {
        if (tag == 200) {
         parse_protectedZoneLatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectedzonelatitude_)));
          set_has_protectedzonelatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_protectedZoneLongitude;
        break;
      }

      // optional int64 protectedZoneLongitude = 26;
      case 26: {
        if (tag == 208) {
         parse_protectedZoneLongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &protectedzonelongitude_)));
          set_has_protectedzonelongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_cenDsrcTollingZoneId;
        break;
      }

      // optional int64 cenDsrcTollingZoneId = 27;
      case 27: {
        if (tag == 216) {
         parse_cenDsrcTollingZoneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cendsrctollingzoneid_)));
          set_has_cendsrctollingzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:its.BasicVehicleHighFreqContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:its.BasicVehicleHighFreqContainer)
  return false;
#undef DO_
}

void BasicVehicleHighFreqContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:its.BasicVehicleHighFreqContainer)
  // required int64 heading = 1;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->heading(), output);
  }

  // required int64 headingConfidence = 2;
  if (has_headingconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->headingconfidence(), output);
  }

  // required int64 speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->speed(), output);
  }

  // required int64 speedConfidence = 4;
  if (has_speedconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->speedconfidence(), output);
  }

  // required int64 driveDirection = 5;
  if (has_drivedirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->drivedirection(), output);
  }

  // required int64 vehicleLength = 6;
  if (has_vehiclelength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->vehiclelength(), output);
  }

  // required int64 vehicleLengthConfidence = 7;
  if (has_vehiclelengthconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->vehiclelengthconfidence(), output);
  }

  // required int64 vehicleWidth = 8;
  if (has_vehiclewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->vehiclewidth(), output);
  }

  // required int64 longitudinalAcceleration = 9;
  if (has_longitudinalacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->longitudinalacceleration(), output);
  }

  // required int64 longitudinalAccelerationConfidence = 10;
  if (has_longitudinalaccelerationconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->longitudinalaccelerationconfidence(), output);
  }

  // required int64 curvature = 11;
  if (has_curvature()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->curvature(), output);
  }

  // required int64 curvatureConfidence = 12;
  if (has_curvatureconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->curvatureconfidence(), output);
  }

  // required int64 curvatureCalcMode = 13;
  if (has_curvaturecalcmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->curvaturecalcmode(), output);
  }

  // required int64 yawRate = 14;
  if (has_yawrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->yawrate(), output);
  }

  // required int64 yawRateConfidence = 15;
  if (has_yawrateconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->yawrateconfidence(), output);
  }

  // optional int64 accelerationControl = 16;
  if (has_accelerationcontrol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->accelerationcontrol(), output);
  }

  // optional int64 lanePosition = 17;
  if (has_laneposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->laneposition(), output);
  }

  // optional int64 steeringWheelAngle = 18;
  if (has_steeringwheelangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->steeringwheelangle(), output);
  }

  // optional int64 steeringWheelAngleConfidence = 19;
  if (has_steeringwheelangleconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->steeringwheelangleconfidence(), output);
  }

  // optional int64 lateralAcceleration = 20;
  if (has_lateralacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->lateralacceleration(), output);
  }

  // optional int64 lateralAccelerationConfidence = 21;
  if (has_lateralaccelerationconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->lateralaccelerationconfidence(), output);
  }

  // optional int64 verticalAcceleration = 22;
  if (has_verticalacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->verticalacceleration(), output);
  }

  // optional int64 verticalAccelerationConfidence = 23;
  if (has_verticalaccelerationconfidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->verticalaccelerationconfidence(), output);
  }

  // optional int64 performanceClass = 24;
  if (has_performanceclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->performanceclass(), output);
  }

  // optional int64 protectedZoneLatitude = 25;
  if (has_protectedzonelatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->protectedzonelatitude(), output);
  }

  // optional int64 protectedZoneLongitude = 26;
  if (has_protectedzonelongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->protectedzonelongitude(), output);
  }

  // optional int64 cenDsrcTollingZoneId = 27;
  if (has_cendsrctollingzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->cendsrctollingzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:its.BasicVehicleHighFreqContainer)
}

::google::protobuf::uint8* BasicVehicleHighFreqContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:its.BasicVehicleHighFreqContainer)
  // required int64 heading = 1;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->heading(), target);
  }

  // required int64 headingConfidence = 2;
  if (has_headingconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->headingconfidence(), target);
  }

  // required int64 speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->speed(), target);
  }

  // required int64 speedConfidence = 4;
  if (has_speedconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->speedconfidence(), target);
  }

  // required int64 driveDirection = 5;
  if (has_drivedirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->drivedirection(), target);
  }

  // required int64 vehicleLength = 6;
  if (has_vehiclelength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->vehiclelength(), target);
  }

  // required int64 vehicleLengthConfidence = 7;
  if (has_vehiclelengthconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->vehiclelengthconfidence(), target);
  }

  // required int64 vehicleWidth = 8;
  if (has_vehiclewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->vehiclewidth(), target);
  }

  // required int64 longitudinalAcceleration = 9;
  if (has_longitudinalacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->longitudinalacceleration(), target);
  }

  // required int64 longitudinalAccelerationConfidence = 10;
  if (has_longitudinalaccelerationconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->longitudinalaccelerationconfidence(), target);
  }

  // required int64 curvature = 11;
  if (has_curvature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->curvature(), target);
  }

  // required int64 curvatureConfidence = 12;
  if (has_curvatureconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->curvatureconfidence(), target);
  }

  // required int64 curvatureCalcMode = 13;
  if (has_curvaturecalcmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->curvaturecalcmode(), target);
  }

  // required int64 yawRate = 14;
  if (has_yawrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->yawrate(), target);
  }

  // required int64 yawRateConfidence = 15;
  if (has_yawrateconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->yawrateconfidence(), target);
  }

  // optional int64 accelerationControl = 16;
  if (has_accelerationcontrol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->accelerationcontrol(), target);
  }

  // optional int64 lanePosition = 17;
  if (has_laneposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->laneposition(), target);
  }

  // optional int64 steeringWheelAngle = 18;
  if (has_steeringwheelangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->steeringwheelangle(), target);
  }

  // optional int64 steeringWheelAngleConfidence = 19;
  if (has_steeringwheelangleconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->steeringwheelangleconfidence(), target);
  }

  // optional int64 lateralAcceleration = 20;
  if (has_lateralacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->lateralacceleration(), target);
  }

  // optional int64 lateralAccelerationConfidence = 21;
  if (has_lateralaccelerationconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->lateralaccelerationconfidence(), target);
  }

  // optional int64 verticalAcceleration = 22;
  if (has_verticalacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->verticalacceleration(), target);
  }

  // optional int64 verticalAccelerationConfidence = 23;
  if (has_verticalaccelerationconfidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->verticalaccelerationconfidence(), target);
  }

  // optional int64 performanceClass = 24;
  if (has_performanceclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->performanceclass(), target);
  }

  // optional int64 protectedZoneLatitude = 25;
  if (has_protectedzonelatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->protectedzonelatitude(), target);
  }

  // optional int64 protectedZoneLongitude = 26;
  if (has_protectedzonelongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->protectedzonelongitude(), target);
  }

  // optional int64 cenDsrcTollingZoneId = 27;
  if (has_cendsrctollingzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->cendsrctollingzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:its.BasicVehicleHighFreqContainer)
  return target;
}

int BasicVehicleHighFreqContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 heading = 1;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->heading());
    }

    // required int64 headingConfidence = 2;
    if (has_headingconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->headingconfidence());
    }

    // required int64 speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->speed());
    }

    // required int64 speedConfidence = 4;
    if (has_speedconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->speedconfidence());
    }

    // required int64 driveDirection = 5;
    if (has_drivedirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->drivedirection());
    }

    // required int64 vehicleLength = 6;
    if (has_vehiclelength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vehiclelength());
    }

    // required int64 vehicleLengthConfidence = 7;
    if (has_vehiclelengthconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vehiclelengthconfidence());
    }

    // required int64 vehicleWidth = 8;
    if (has_vehiclewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vehiclewidth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 longitudinalAcceleration = 9;
    if (has_longitudinalacceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longitudinalacceleration());
    }

    // required int64 longitudinalAccelerationConfidence = 10;
    if (has_longitudinalaccelerationconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longitudinalaccelerationconfidence());
    }

    // required int64 curvature = 11;
    if (has_curvature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curvature());
    }

    // required int64 curvatureConfidence = 12;
    if (has_curvatureconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curvatureconfidence());
    }

    // required int64 curvatureCalcMode = 13;
    if (has_curvaturecalcmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curvaturecalcmode());
    }

    // required int64 yawRate = 14;
    if (has_yawrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yawrate());
    }

    // required int64 yawRateConfidence = 15;
    if (has_yawrateconfidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->yawrateconfidence());
    }

    // optional int64 accelerationControl = 16;
    if (has_accelerationcontrol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->accelerationcontrol());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 lanePosition = 17;
    if (has_laneposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->laneposition());
    }

    // optional int64 steeringWheelAngle = 18;
    if (has_steeringwheelangle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->steeringwheelangle());
    }

    // optional int64 steeringWheelAngleConfidence = 19;
    if (has_steeringwheelangleconfidence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->steeringwheelangleconfidence());
    }

    // optional int64 lateralAcceleration = 20;
    if (has_lateralacceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lateralacceleration());
    }

    // optional int64 lateralAccelerationConfidence = 21;
    if (has_lateralaccelerationconfidence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lateralaccelerationconfidence());
    }

    // optional int64 verticalAcceleration = 22;
    if (has_verticalacceleration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->verticalacceleration());
    }

    // optional int64 verticalAccelerationConfidence = 23;
    if (has_verticalaccelerationconfidence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->verticalaccelerationconfidence());
    }

    // optional int64 performanceClass = 24;
    if (has_performanceclass()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->performanceclass());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 protectedZoneLatitude = 25;
    if (has_protectedzonelatitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectedzonelatitude());
    }

    // optional int64 protectedZoneLongitude = 26;
    if (has_protectedzonelongitude()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->protectedzonelongitude());
    }

    // optional int64 cenDsrcTollingZoneId = 27;
    if (has_cendsrctollingzoneid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cendsrctollingzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicVehicleHighFreqContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BasicVehicleHighFreqContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BasicVehicleHighFreqContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BasicVehicleHighFreqContainer::MergeFrom(const BasicVehicleHighFreqContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_headingconfidence()) {
      set_headingconfidence(from.headingconfidence());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_speedconfidence()) {
      set_speedconfidence(from.speedconfidence());
    }
    if (from.has_drivedirection()) {
      set_drivedirection(from.drivedirection());
    }
    if (from.has_vehiclelength()) {
      set_vehiclelength(from.vehiclelength());
    }
    if (from.has_vehiclelengthconfidence()) {
      set_vehiclelengthconfidence(from.vehiclelengthconfidence());
    }
    if (from.has_vehiclewidth()) {
      set_vehiclewidth(from.vehiclewidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_longitudinalacceleration()) {
      set_longitudinalacceleration(from.longitudinalacceleration());
    }
    if (from.has_longitudinalaccelerationconfidence()) {
      set_longitudinalaccelerationconfidence(from.longitudinalaccelerationconfidence());
    }
    if (from.has_curvature()) {
      set_curvature(from.curvature());
    }
    if (from.has_curvatureconfidence()) {
      set_curvatureconfidence(from.curvatureconfidence());
    }
    if (from.has_curvaturecalcmode()) {
      set_curvaturecalcmode(from.curvaturecalcmode());
    }
    if (from.has_yawrate()) {
      set_yawrate(from.yawrate());
    }
    if (from.has_yawrateconfidence()) {
      set_yawrateconfidence(from.yawrateconfidence());
    }
    if (from.has_accelerationcontrol()) {
      set_accelerationcontrol(from.accelerationcontrol());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_laneposition()) {
      set_laneposition(from.laneposition());
    }
    if (from.has_steeringwheelangle()) {
      set_steeringwheelangle(from.steeringwheelangle());
    }
    if (from.has_steeringwheelangleconfidence()) {
      set_steeringwheelangleconfidence(from.steeringwheelangleconfidence());
    }
    if (from.has_lateralacceleration()) {
      set_lateralacceleration(from.lateralacceleration());
    }
    if (from.has_lateralaccelerationconfidence()) {
      set_lateralaccelerationconfidence(from.lateralaccelerationconfidence());
    }
    if (from.has_verticalacceleration()) {
      set_verticalacceleration(from.verticalacceleration());
    }
    if (from.has_verticalaccelerationconfidence()) {
      set_verticalaccelerationconfidence(from.verticalaccelerationconfidence());
    }
    if (from.has_performanceclass()) {
      set_performanceclass(from.performanceclass());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_protectedzonelatitude()) {
      set_protectedzonelatitude(from.protectedzonelatitude());
    }
    if (from.has_protectedzonelongitude()) {
      set_protectedzonelongitude(from.protectedzonelongitude());
    }
    if (from.has_cendsrctollingzoneid()) {
      set_cendsrctollingzoneid(from.cendsrctollingzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BasicVehicleHighFreqContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicVehicleHighFreqContainer::CopyFrom(const BasicVehicleHighFreqContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicVehicleHighFreqContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void BasicVehicleHighFreqContainer::Swap(BasicVehicleHighFreqContainer* other) {
  if (other != this) {
    std::swap(heading_, other->heading_);
    std::swap(headingconfidence_, other->headingconfidence_);
    std::swap(speed_, other->speed_);
    std::swap(speedconfidence_, other->speedconfidence_);
    std::swap(drivedirection_, other->drivedirection_);
    std::swap(vehiclelength_, other->vehiclelength_);
    std::swap(vehiclelengthconfidence_, other->vehiclelengthconfidence_);
    std::swap(vehiclewidth_, other->vehiclewidth_);
    std::swap(longitudinalacceleration_, other->longitudinalacceleration_);
    std::swap(longitudinalaccelerationconfidence_, other->longitudinalaccelerationconfidence_);
    std::swap(curvature_, other->curvature_);
    std::swap(curvatureconfidence_, other->curvatureconfidence_);
    std::swap(curvaturecalcmode_, other->curvaturecalcmode_);
    std::swap(yawrate_, other->yawrate_);
    std::swap(yawrateconfidence_, other->yawrateconfidence_);
    std::swap(accelerationcontrol_, other->accelerationcontrol_);
    std::swap(laneposition_, other->laneposition_);
    std::swap(steeringwheelangle_, other->steeringwheelangle_);
    std::swap(steeringwheelangleconfidence_, other->steeringwheelangleconfidence_);
    std::swap(lateralacceleration_, other->lateralacceleration_);
    std::swap(lateralaccelerationconfidence_, other->lateralaccelerationconfidence_);
    std::swap(verticalacceleration_, other->verticalacceleration_);
    std::swap(verticalaccelerationconfidence_, other->verticalaccelerationconfidence_);
    std::swap(performanceclass_, other->performanceclass_);
    std::swap(protectedzonelatitude_, other->protectedzonelatitude_);
    std::swap(protectedzonelongitude_, other->protectedzonelongitude_);
    std::swap(cendsrctollingzoneid_, other->cendsrctollingzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BasicVehicleHighFreqContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicVehicleHighFreqContainer_descriptor_;
  metadata.reflection = BasicVehicleHighFreqContainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

// @@protoc_insertion_point(global_scope)
