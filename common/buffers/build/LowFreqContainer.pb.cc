// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LowFreqContainer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LowFreqContainer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace its {

namespace {

const ::google::protobuf::Descriptor* LowFreqContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LowFreqContainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LowFreqContainer_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LowFreqContainer_2eproto() {
  protobuf_AddDesc_LowFreqContainer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LowFreqContainer.proto");
  GOOGLE_CHECK(file != NULL);
  LowFreqContainer_descriptor_ = file->message_type(0);
  static const int LowFreqContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowFreqContainer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowFreqContainer, basicvehiclelowfreqcontainer_),
  };
  LowFreqContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LowFreqContainer_descriptor_,
      LowFreqContainer::default_instance_,
      LowFreqContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowFreqContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LowFreqContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LowFreqContainer));
  LowFreqContainer_Type_descriptor_ = LowFreqContainer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LowFreqContainer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LowFreqContainer_descriptor_, &LowFreqContainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LowFreqContainer_2eproto() {
  delete LowFreqContainer::default_instance_;
  delete LowFreqContainer_reflection_;
}

void protobuf_AddDesc_LowFreqContainer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::its::protobuf_AddDesc_BasicVehicleLowFreqContainer_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026LowFreqContainer.proto\022\003its\032\"BasicVehi"
    "cleLowFreqContainer.proto\"\263\001\n\020LowFreqCon"
    "tainer\022(\n\004type\030\001 \002(\0162\032.its.LowFreqContai"
    "ner.Type\022G\n\034basicVehicleLowFreqContainer"
    "\030\002 \001(\0132!.its.BasicVehicleLowFreqContaine"
    "r\",\n\004Type\022$\n BASIC_VEHICLE_LOW_FREQ_CONT"
    "AINER\020\001", 247);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LowFreqContainer.proto", &protobuf_RegisterTypes);
  LowFreqContainer::default_instance_ = new LowFreqContainer();
  LowFreqContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LowFreqContainer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LowFreqContainer_2eproto {
  StaticDescriptorInitializer_LowFreqContainer_2eproto() {
    protobuf_AddDesc_LowFreqContainer_2eproto();
  }
} static_descriptor_initializer_LowFreqContainer_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* LowFreqContainer_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LowFreqContainer_Type_descriptor_;
}
bool LowFreqContainer_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LowFreqContainer_Type LowFreqContainer::BASIC_VEHICLE_LOW_FREQ_CONTAINER;
const LowFreqContainer_Type LowFreqContainer::Type_MIN;
const LowFreqContainer_Type LowFreqContainer::Type_MAX;
const int LowFreqContainer::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LowFreqContainer::kTypeFieldNumber;
const int LowFreqContainer::kBasicVehicleLowFreqContainerFieldNumber;
#endif  // !_MSC_VER

LowFreqContainer::LowFreqContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:its.LowFreqContainer)
}

void LowFreqContainer::InitAsDefaultInstance() {
  basicvehiclelowfreqcontainer_ = const_cast< ::its::BasicVehicleLowFreqContainer*>(&::its::BasicVehicleLowFreqContainer::default_instance());
}

LowFreqContainer::LowFreqContainer(const LowFreqContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:its.LowFreqContainer)
}

void LowFreqContainer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  basicvehiclelowfreqcontainer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LowFreqContainer::~LowFreqContainer() {
  // @@protoc_insertion_point(destructor:its.LowFreqContainer)
  SharedDtor();
}

void LowFreqContainer::SharedDtor() {
  if (this != default_instance_) {
    delete basicvehiclelowfreqcontainer_;
  }
}

void LowFreqContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LowFreqContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LowFreqContainer_descriptor_;
}

const LowFreqContainer& LowFreqContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LowFreqContainer_2eproto();
  return *default_instance_;
}

LowFreqContainer* LowFreqContainer::default_instance_ = NULL;

LowFreqContainer* LowFreqContainer::New() const {
  return new LowFreqContainer;
}

void LowFreqContainer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_basicvehiclelowfreqcontainer()) {
      if (basicvehiclelowfreqcontainer_ != NULL) basicvehiclelowfreqcontainer_->::its::BasicVehicleLowFreqContainer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LowFreqContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:its.LowFreqContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .its.LowFreqContainer.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::its::LowFreqContainer_Type_IsValid(value)) {
            set_type(static_cast< ::its::LowFreqContainer_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basicVehicleLowFreqContainer;
        break;
      }

      // optional .its.BasicVehicleLowFreqContainer basicVehicleLowFreqContainer = 2;
      case 2: {
        if (tag == 18) {
         parse_basicVehicleLowFreqContainer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basicvehiclelowfreqcontainer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:its.LowFreqContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:its.LowFreqContainer)
  return false;
#undef DO_
}

void LowFreqContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:its.LowFreqContainer)
  // required .its.LowFreqContainer.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .its.BasicVehicleLowFreqContainer basicVehicleLowFreqContainer = 2;
  if (has_basicvehiclelowfreqcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basicvehiclelowfreqcontainer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:its.LowFreqContainer)
}

::google::protobuf::uint8* LowFreqContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:its.LowFreqContainer)
  // required .its.LowFreqContainer.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .its.BasicVehicleLowFreqContainer basicVehicleLowFreqContainer = 2;
  if (has_basicvehiclelowfreqcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basicvehiclelowfreqcontainer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:its.LowFreqContainer)
  return target;
}

int LowFreqContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .its.LowFreqContainer.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .its.BasicVehicleLowFreqContainer basicVehicleLowFreqContainer = 2;
    if (has_basicvehiclelowfreqcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basicvehiclelowfreqcontainer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LowFreqContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LowFreqContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LowFreqContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LowFreqContainer::MergeFrom(const LowFreqContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_basicvehiclelowfreqcontainer()) {
      mutable_basicvehiclelowfreqcontainer()->::its::BasicVehicleLowFreqContainer::MergeFrom(from.basicvehiclelowfreqcontainer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LowFreqContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LowFreqContainer::CopyFrom(const LowFreqContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LowFreqContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basicvehiclelowfreqcontainer()) {
    if (!this->basicvehiclelowfreqcontainer().IsInitialized()) return false;
  }
  return true;
}

void LowFreqContainer::Swap(LowFreqContainer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(basicvehiclelowfreqcontainer_, other->basicvehiclelowfreqcontainer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LowFreqContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LowFreqContainer_descriptor_;
  metadata.reflection = LowFreqContainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

// @@protoc_insertion_point(global_scope)
