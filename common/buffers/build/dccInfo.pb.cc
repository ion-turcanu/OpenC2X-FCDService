// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dccInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dccInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace infoPackage {

namespace {

const ::google::protobuf::Descriptor* DccInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DccInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dccInfo_2eproto() {
  protobuf_AddDesc_dccInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dccInfo.proto");
  GOOGLE_CHECK(file != NULL);
  DccInfo_descriptor_ = file->message_type(0);
  static const int DccInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, channelload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, accesscategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, availabletokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, queuedpackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, dccmechanism_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, txpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, tokeninterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, datarate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, carriersense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, flushreqpackets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, flushnotreqpackets_),
  };
  DccInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DccInfo_descriptor_,
      DccInfo::default_instance_,
      DccInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DccInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DccInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dccInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DccInfo_descriptor_, &DccInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dccInfo_2eproto() {
  delete DccInfo::default_instance_;
  delete DccInfo_reflection_;
}

void protobuf_AddDesc_dccInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rdccInfo.proto\022\013infoPackage\"\236\002\n\007DccInfo"
    "\022\014\n\004time\030\001 \001(\003\022\023\n\013channelLoad\030\002 \001(\001\022\r\n\005s"
    "tate\030\003 \001(\t\022\026\n\016accessCategory\030\004 \001(\t\022\027\n\017av"
    "ailableTokens\030\005 \001(\005\022\025\n\rqueuedPackets\030\006 \001"
    "(\005\022\024\n\014dccMechanism\030\007 \001(\005\022\017\n\007txPower\030\010 \001("
    "\001\022\025\n\rtokenInterval\030\t \001(\001\022\020\n\010datarate\030\n \001"
    "(\001\022\024\n\014carrierSense\030\013 \001(\001\022\027\n\017flushReqPack"
    "ets\030\014 \001(\005\022\032\n\022flushNotReqPackets\030\r \001(\005", 317);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dccInfo.proto", &protobuf_RegisterTypes);
  DccInfo::default_instance_ = new DccInfo();
  DccInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dccInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dccInfo_2eproto {
  StaticDescriptorInitializer_dccInfo_2eproto() {
    protobuf_AddDesc_dccInfo_2eproto();
  }
} static_descriptor_initializer_dccInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DccInfo::kTimeFieldNumber;
const int DccInfo::kChannelLoadFieldNumber;
const int DccInfo::kStateFieldNumber;
const int DccInfo::kAccessCategoryFieldNumber;
const int DccInfo::kAvailableTokensFieldNumber;
const int DccInfo::kQueuedPacketsFieldNumber;
const int DccInfo::kDccMechanismFieldNumber;
const int DccInfo::kTxPowerFieldNumber;
const int DccInfo::kTokenIntervalFieldNumber;
const int DccInfo::kDatarateFieldNumber;
const int DccInfo::kCarrierSenseFieldNumber;
const int DccInfo::kFlushReqPacketsFieldNumber;
const int DccInfo::kFlushNotReqPacketsFieldNumber;
#endif  // !_MSC_VER

DccInfo::DccInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:infoPackage.DccInfo)
}

void DccInfo::InitAsDefaultInstance() {
}

DccInfo::DccInfo(const DccInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:infoPackage.DccInfo)
}

void DccInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  channelload_ = 0;
  state_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesscategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  availabletokens_ = 0;
  queuedpackets_ = 0;
  dccmechanism_ = 0;
  txpower_ = 0;
  tokeninterval_ = 0;
  datarate_ = 0;
  carriersense_ = 0;
  flushreqpackets_ = 0;
  flushnotreqpackets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DccInfo::~DccInfo() {
  // @@protoc_insertion_point(destructor:infoPackage.DccInfo)
  SharedDtor();
}

void DccInfo::SharedDtor() {
  if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_;
  }
  if (accesscategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete accesscategory_;
  }
  if (this != default_instance_) {
  }
}

void DccInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DccInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DccInfo_descriptor_;
}

const DccInfo& DccInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dccInfo_2eproto();
  return *default_instance_;
}

DccInfo* DccInfo::default_instance_ = NULL;

DccInfo* DccInfo::New() const {
  return new DccInfo;
}

void DccInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DccInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(time_, channelload_);
    ZR_(availabletokens_, txpower_);
    if (has_state()) {
      if (state_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_->clear();
      }
    }
    if (has_accesscategory()) {
      if (accesscategory_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        accesscategory_->clear();
      }
    }
    dccmechanism_ = 0;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(flushreqpackets_, flushnotreqpackets_);
    tokeninterval_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DccInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:infoPackage.DccInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_channelLoad;
        break;
      }

      // optional double channelLoad = 2;
      case 2: {
        if (tag == 17) {
         parse_channelLoad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &channelload_)));
          set_has_channelload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_state;
        break;
      }

      // optional string state = 3;
      case 3: {
        if (tag == 26) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accessCategory;
        break;
      }

      // optional string accessCategory = 4;
      case 4: {
        if (tag == 34) {
         parse_accessCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesscategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->accesscategory().data(), this->accesscategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "accesscategory");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_availableTokens;
        break;
      }

      // optional int32 availableTokens = 5;
      case 5: {
        if (tag == 40) {
         parse_availableTokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &availabletokens_)));
          set_has_availabletokens();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_queuedPackets;
        break;
      }

      // optional int32 queuedPackets = 6;
      case 6: {
        if (tag == 48) {
         parse_queuedPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuedpackets_)));
          set_has_queuedpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dccMechanism;
        break;
      }

      // optional int32 dccMechanism = 7;
      case 7: {
        if (tag == 56) {
         parse_dccMechanism:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dccmechanism_)));
          set_has_dccmechanism();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_txPower;
        break;
      }

      // optional double txPower = 8;
      case 8: {
        if (tag == 65) {
         parse_txPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &txpower_)));
          set_has_txpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_tokenInterval;
        break;
      }

      // optional double tokenInterval = 9;
      case 9: {
        if (tag == 73) {
         parse_tokenInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tokeninterval_)));
          set_has_tokeninterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_datarate;
        break;
      }

      // optional double datarate = 10;
      case 10: {
        if (tag == 81) {
         parse_datarate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datarate_)));
          set_has_datarate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_carrierSense;
        break;
      }

      // optional double carrierSense = 11;
      case 11: {
        if (tag == 89) {
         parse_carrierSense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &carriersense_)));
          set_has_carriersense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_flushReqPackets;
        break;
      }

      // optional int32 flushReqPackets = 12;
      case 12: {
        if (tag == 96) {
         parse_flushReqPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flushreqpackets_)));
          set_has_flushreqpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_flushNotReqPackets;
        break;
      }

      // optional int32 flushNotReqPackets = 13;
      case 13: {
        if (tag == 104) {
         parse_flushNotReqPackets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flushnotreqpackets_)));
          set_has_flushnotreqpackets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:infoPackage.DccInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:infoPackage.DccInfo)
  return false;
#undef DO_
}

void DccInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:infoPackage.DccInfo)
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional double channelLoad = 2;
  if (has_channelload()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->channelload(), output);
  }

  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->state(), output);
  }

  // optional string accessCategory = 4;
  if (has_accesscategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesscategory().data(), this->accesscategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesscategory");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accesscategory(), output);
  }

  // optional int32 availableTokens = 5;
  if (has_availabletokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->availabletokens(), output);
  }

  // optional int32 queuedPackets = 6;
  if (has_queuedpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->queuedpackets(), output);
  }

  // optional int32 dccMechanism = 7;
  if (has_dccmechanism()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dccmechanism(), output);
  }

  // optional double txPower = 8;
  if (has_txpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->txpower(), output);
  }

  // optional double tokenInterval = 9;
  if (has_tokeninterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tokeninterval(), output);
  }

  // optional double datarate = 10;
  if (has_datarate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->datarate(), output);
  }

  // optional double carrierSense = 11;
  if (has_carriersense()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->carriersense(), output);
  }

  // optional int32 flushReqPackets = 12;
  if (has_flushreqpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->flushreqpackets(), output);
  }

  // optional int32 flushNotReqPackets = 13;
  if (has_flushnotreqpackets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->flushnotreqpackets(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:infoPackage.DccInfo)
}

::google::protobuf::uint8* DccInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:infoPackage.DccInfo)
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional double channelLoad = 2;
  if (has_channelload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->channelload(), target);
  }

  // optional string state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->state(), target);
  }

  // optional string accessCategory = 4;
  if (has_accesscategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->accesscategory().data(), this->accesscategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "accesscategory");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accesscategory(), target);
  }

  // optional int32 availableTokens = 5;
  if (has_availabletokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->availabletokens(), target);
  }

  // optional int32 queuedPackets = 6;
  if (has_queuedpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->queuedpackets(), target);
  }

  // optional int32 dccMechanism = 7;
  if (has_dccmechanism()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dccmechanism(), target);
  }

  // optional double txPower = 8;
  if (has_txpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->txpower(), target);
  }

  // optional double tokenInterval = 9;
  if (has_tokeninterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->tokeninterval(), target);
  }

  // optional double datarate = 10;
  if (has_datarate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->datarate(), target);
  }

  // optional double carrierSense = 11;
  if (has_carriersense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->carriersense(), target);
  }

  // optional int32 flushReqPackets = 12;
  if (has_flushreqpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->flushreqpackets(), target);
  }

  // optional int32 flushNotReqPackets = 13;
  if (has_flushnotreqpackets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->flushnotreqpackets(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:infoPackage.DccInfo)
  return target;
}

int DccInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional double channelLoad = 2;
    if (has_channelload()) {
      total_size += 1 + 8;
    }

    // optional string state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional string accessCategory = 4;
    if (has_accesscategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesscategory());
    }

    // optional int32 availableTokens = 5;
    if (has_availabletokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->availabletokens());
    }

    // optional int32 queuedPackets = 6;
    if (has_queuedpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuedpackets());
    }

    // optional int32 dccMechanism = 7;
    if (has_dccmechanism()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dccmechanism());
    }

    // optional double txPower = 8;
    if (has_txpower()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double tokenInterval = 9;
    if (has_tokeninterval()) {
      total_size += 1 + 8;
    }

    // optional double datarate = 10;
    if (has_datarate()) {
      total_size += 1 + 8;
    }

    // optional double carrierSense = 11;
    if (has_carriersense()) {
      total_size += 1 + 8;
    }

    // optional int32 flushReqPackets = 12;
    if (has_flushreqpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flushreqpackets());
    }

    // optional int32 flushNotReqPackets = 13;
    if (has_flushnotreqpackets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flushnotreqpackets());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DccInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DccInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DccInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DccInfo::MergeFrom(const DccInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_channelload()) {
      set_channelload(from.channelload());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_accesscategory()) {
      set_accesscategory(from.accesscategory());
    }
    if (from.has_availabletokens()) {
      set_availabletokens(from.availabletokens());
    }
    if (from.has_queuedpackets()) {
      set_queuedpackets(from.queuedpackets());
    }
    if (from.has_dccmechanism()) {
      set_dccmechanism(from.dccmechanism());
    }
    if (from.has_txpower()) {
      set_txpower(from.txpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tokeninterval()) {
      set_tokeninterval(from.tokeninterval());
    }
    if (from.has_datarate()) {
      set_datarate(from.datarate());
    }
    if (from.has_carriersense()) {
      set_carriersense(from.carriersense());
    }
    if (from.has_flushreqpackets()) {
      set_flushreqpackets(from.flushreqpackets());
    }
    if (from.has_flushnotreqpackets()) {
      set_flushnotreqpackets(from.flushnotreqpackets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DccInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DccInfo::CopyFrom(const DccInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DccInfo::IsInitialized() const {

  return true;
}

void DccInfo::Swap(DccInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(channelload_, other->channelload_);
    std::swap(state_, other->state_);
    std::swap(accesscategory_, other->accesscategory_);
    std::swap(availabletokens_, other->availabletokens_);
    std::swap(queuedpackets_, other->queuedpackets_);
    std::swap(dccmechanism_, other->dccmechanism_);
    std::swap(txpower_, other->txpower_);
    std::swap(tokeninterval_, other->tokeninterval_);
    std::swap(datarate_, other->datarate_);
    std::swap(carriersense_, other->carriersense_);
    std::swap(flushreqpackets_, other->flushreqpackets_);
    std::swap(flushnotreqpackets_, other->flushnotreqpackets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DccInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DccInfo_descriptor_;
  metadata.reflection = DccInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace infoPackage

// @@protoc_insertion_point(global_scope)
