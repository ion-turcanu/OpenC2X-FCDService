// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CamParameters.proto

#ifndef PROTOBUF_CamParameters_2eproto__INCLUDED
#define PROTOBUF_CamParameters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "BasicContainer.pb.h"
#include "HighFreqContainer.pb.h"
#include "LowFreqContainer.pb.h"
#include "SpecialVehicleContainer.pb.h"
// @@protoc_insertion_point(includes)

namespace its {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CamParameters_2eproto();
void protobuf_AssignDesc_CamParameters_2eproto();
void protobuf_ShutdownFile_CamParameters_2eproto();

class CamParameters;

// ===================================================================

class CamParameters : public ::google::protobuf::Message {
 public:
  CamParameters();
  virtual ~CamParameters();

  CamParameters(const CamParameters& from);

  inline CamParameters& operator=(const CamParameters& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CamParameters& default_instance();

  void Swap(CamParameters* other);

  // implements Message ----------------------------------------------

  CamParameters* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CamParameters& from);
  void MergeFrom(const CamParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .its.BasicContainer basicContainer = 1;
  inline bool has_basiccontainer() const;
  inline void clear_basiccontainer();
  static const int kBasicContainerFieldNumber = 1;
  inline const ::its::BasicContainer& basiccontainer() const;
  inline ::its::BasicContainer* mutable_basiccontainer();
  inline ::its::BasicContainer* release_basiccontainer();
  inline void set_allocated_basiccontainer(::its::BasicContainer* basiccontainer);

  // required .its.HighFreqContainer highFreqContainer = 2;
  inline bool has_highfreqcontainer() const;
  inline void clear_highfreqcontainer();
  static const int kHighFreqContainerFieldNumber = 2;
  inline const ::its::HighFreqContainer& highfreqcontainer() const;
  inline ::its::HighFreqContainer* mutable_highfreqcontainer();
  inline ::its::HighFreqContainer* release_highfreqcontainer();
  inline void set_allocated_highfreqcontainer(::its::HighFreqContainer* highfreqcontainer);

  // optional .its.LowFreqContainer lowFreqContainer = 3;
  inline bool has_lowfreqcontainer() const;
  inline void clear_lowfreqcontainer();
  static const int kLowFreqContainerFieldNumber = 3;
  inline const ::its::LowFreqContainer& lowfreqcontainer() const;
  inline ::its::LowFreqContainer* mutable_lowfreqcontainer();
  inline ::its::LowFreqContainer* release_lowfreqcontainer();
  inline void set_allocated_lowfreqcontainer(::its::LowFreqContainer* lowfreqcontainer);

  // optional .its.SpecialVehicleContainer specialVehicleContainer = 4;
  inline bool has_specialvehiclecontainer() const;
  inline void clear_specialvehiclecontainer();
  static const int kSpecialVehicleContainerFieldNumber = 4;
  inline const ::its::SpecialVehicleContainer& specialvehiclecontainer() const;
  inline ::its::SpecialVehicleContainer* mutable_specialvehiclecontainer();
  inline ::its::SpecialVehicleContainer* release_specialvehiclecontainer();
  inline void set_allocated_specialvehiclecontainer(::its::SpecialVehicleContainer* specialvehiclecontainer);

  // @@protoc_insertion_point(class_scope:its.CamParameters)
 private:
  inline void set_has_basiccontainer();
  inline void clear_has_basiccontainer();
  inline void set_has_highfreqcontainer();
  inline void clear_has_highfreqcontainer();
  inline void set_has_lowfreqcontainer();
  inline void clear_has_lowfreqcontainer();
  inline void set_has_specialvehiclecontainer();
  inline void clear_has_specialvehiclecontainer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::its::BasicContainer* basiccontainer_;
  ::its::HighFreqContainer* highfreqcontainer_;
  ::its::LowFreqContainer* lowfreqcontainer_;
  ::its::SpecialVehicleContainer* specialvehiclecontainer_;
  friend void  protobuf_AddDesc_CamParameters_2eproto();
  friend void protobuf_AssignDesc_CamParameters_2eproto();
  friend void protobuf_ShutdownFile_CamParameters_2eproto();

  void InitAsDefaultInstance();
  static CamParameters* default_instance_;
};
// ===================================================================


// ===================================================================

// CamParameters

// required .its.BasicContainer basicContainer = 1;
inline bool CamParameters::has_basiccontainer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CamParameters::set_has_basiccontainer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CamParameters::clear_has_basiccontainer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CamParameters::clear_basiccontainer() {
  if (basiccontainer_ != NULL) basiccontainer_->::its::BasicContainer::Clear();
  clear_has_basiccontainer();
}
inline const ::its::BasicContainer& CamParameters::basiccontainer() const {
  // @@protoc_insertion_point(field_get:its.CamParameters.basicContainer)
  return basiccontainer_ != NULL ? *basiccontainer_ : *default_instance_->basiccontainer_;
}
inline ::its::BasicContainer* CamParameters::mutable_basiccontainer() {
  set_has_basiccontainer();
  if (basiccontainer_ == NULL) basiccontainer_ = new ::its::BasicContainer;
  // @@protoc_insertion_point(field_mutable:its.CamParameters.basicContainer)
  return basiccontainer_;
}
inline ::its::BasicContainer* CamParameters::release_basiccontainer() {
  clear_has_basiccontainer();
  ::its::BasicContainer* temp = basiccontainer_;
  basiccontainer_ = NULL;
  return temp;
}
inline void CamParameters::set_allocated_basiccontainer(::its::BasicContainer* basiccontainer) {
  delete basiccontainer_;
  basiccontainer_ = basiccontainer;
  if (basiccontainer) {
    set_has_basiccontainer();
  } else {
    clear_has_basiccontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.CamParameters.basicContainer)
}

// required .its.HighFreqContainer highFreqContainer = 2;
inline bool CamParameters::has_highfreqcontainer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CamParameters::set_has_highfreqcontainer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CamParameters::clear_has_highfreqcontainer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CamParameters::clear_highfreqcontainer() {
  if (highfreqcontainer_ != NULL) highfreqcontainer_->::its::HighFreqContainer::Clear();
  clear_has_highfreqcontainer();
}
inline const ::its::HighFreqContainer& CamParameters::highfreqcontainer() const {
  // @@protoc_insertion_point(field_get:its.CamParameters.highFreqContainer)
  return highfreqcontainer_ != NULL ? *highfreqcontainer_ : *default_instance_->highfreqcontainer_;
}
inline ::its::HighFreqContainer* CamParameters::mutable_highfreqcontainer() {
  set_has_highfreqcontainer();
  if (highfreqcontainer_ == NULL) highfreqcontainer_ = new ::its::HighFreqContainer;
  // @@protoc_insertion_point(field_mutable:its.CamParameters.highFreqContainer)
  return highfreqcontainer_;
}
inline ::its::HighFreqContainer* CamParameters::release_highfreqcontainer() {
  clear_has_highfreqcontainer();
  ::its::HighFreqContainer* temp = highfreqcontainer_;
  highfreqcontainer_ = NULL;
  return temp;
}
inline void CamParameters::set_allocated_highfreqcontainer(::its::HighFreqContainer* highfreqcontainer) {
  delete highfreqcontainer_;
  highfreqcontainer_ = highfreqcontainer;
  if (highfreqcontainer) {
    set_has_highfreqcontainer();
  } else {
    clear_has_highfreqcontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.CamParameters.highFreqContainer)
}

// optional .its.LowFreqContainer lowFreqContainer = 3;
inline bool CamParameters::has_lowfreqcontainer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CamParameters::set_has_lowfreqcontainer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CamParameters::clear_has_lowfreqcontainer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CamParameters::clear_lowfreqcontainer() {
  if (lowfreqcontainer_ != NULL) lowfreqcontainer_->::its::LowFreqContainer::Clear();
  clear_has_lowfreqcontainer();
}
inline const ::its::LowFreqContainer& CamParameters::lowfreqcontainer() const {
  // @@protoc_insertion_point(field_get:its.CamParameters.lowFreqContainer)
  return lowfreqcontainer_ != NULL ? *lowfreqcontainer_ : *default_instance_->lowfreqcontainer_;
}
inline ::its::LowFreqContainer* CamParameters::mutable_lowfreqcontainer() {
  set_has_lowfreqcontainer();
  if (lowfreqcontainer_ == NULL) lowfreqcontainer_ = new ::its::LowFreqContainer;
  // @@protoc_insertion_point(field_mutable:its.CamParameters.lowFreqContainer)
  return lowfreqcontainer_;
}
inline ::its::LowFreqContainer* CamParameters::release_lowfreqcontainer() {
  clear_has_lowfreqcontainer();
  ::its::LowFreqContainer* temp = lowfreqcontainer_;
  lowfreqcontainer_ = NULL;
  return temp;
}
inline void CamParameters::set_allocated_lowfreqcontainer(::its::LowFreqContainer* lowfreqcontainer) {
  delete lowfreqcontainer_;
  lowfreqcontainer_ = lowfreqcontainer;
  if (lowfreqcontainer) {
    set_has_lowfreqcontainer();
  } else {
    clear_has_lowfreqcontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.CamParameters.lowFreqContainer)
}

// optional .its.SpecialVehicleContainer specialVehicleContainer = 4;
inline bool CamParameters::has_specialvehiclecontainer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CamParameters::set_has_specialvehiclecontainer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CamParameters::clear_has_specialvehiclecontainer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CamParameters::clear_specialvehiclecontainer() {
  if (specialvehiclecontainer_ != NULL) specialvehiclecontainer_->::its::SpecialVehicleContainer::Clear();
  clear_has_specialvehiclecontainer();
}
inline const ::its::SpecialVehicleContainer& CamParameters::specialvehiclecontainer() const {
  // @@protoc_insertion_point(field_get:its.CamParameters.specialVehicleContainer)
  return specialvehiclecontainer_ != NULL ? *specialvehiclecontainer_ : *default_instance_->specialvehiclecontainer_;
}
inline ::its::SpecialVehicleContainer* CamParameters::mutable_specialvehiclecontainer() {
  set_has_specialvehiclecontainer();
  if (specialvehiclecontainer_ == NULL) specialvehiclecontainer_ = new ::its::SpecialVehicleContainer;
  // @@protoc_insertion_point(field_mutable:its.CamParameters.specialVehicleContainer)
  return specialvehiclecontainer_;
}
inline ::its::SpecialVehicleContainer* CamParameters::release_specialvehiclecontainer() {
  clear_has_specialvehiclecontainer();
  ::its::SpecialVehicleContainer* temp = specialvehiclecontainer_;
  specialvehiclecontainer_ = NULL;
  return temp;
}
inline void CamParameters::set_allocated_specialvehiclecontainer(::its::SpecialVehicleContainer* specialvehiclecontainer) {
  delete specialvehiclecontainer_;
  specialvehiclecontainer_ = specialvehiclecontainer;
  if (specialvehiclecontainer) {
    set_has_specialvehiclecontainer();
  } else {
    clear_has_specialvehiclecontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.CamParameters.specialVehicleContainer)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CamParameters_2eproto__INCLUDED
