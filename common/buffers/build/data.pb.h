// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dataPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class DATA;

enum DATA_Type {
  DATA_Type_CAM = 1,
  DATA_Type_DENM = 2,
  DATA_Type_FCD = 3
};
bool DATA_Type_IsValid(int value);
const DATA_Type DATA_Type_Type_MIN = DATA_Type_CAM;
const DATA_Type DATA_Type_Type_MAX = DATA_Type_FCD;
const int DATA_Type_Type_ARRAYSIZE = DATA_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATA_Type_descriptor();
inline const ::std::string& DATA_Type_Name(DATA_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATA_Type_descriptor(), value);
}
inline bool DATA_Type_Parse(
    const ::std::string& name, DATA_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATA_Type>(
    DATA_Type_descriptor(), name, value);
}
enum DATA_Priority {
  DATA_Priority_BK = 1,
  DATA_Priority_BE = 0,
  DATA_Priority_VI = 4,
  DATA_Priority_VO = 6
};
bool DATA_Priority_IsValid(int value);
const DATA_Priority DATA_Priority_Priority_MIN = DATA_Priority_BE;
const DATA_Priority DATA_Priority_Priority_MAX = DATA_Priority_VO;
const int DATA_Priority_Priority_ARRAYSIZE = DATA_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* DATA_Priority_descriptor();
inline const ::std::string& DATA_Priority_Name(DATA_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    DATA_Priority_descriptor(), value);
}
inline bool DATA_Priority_Parse(
    const ::std::string& name, DATA_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DATA_Priority>(
    DATA_Priority_descriptor(), name, value);
}
// ===================================================================

class DATA : public ::google::protobuf::Message {
 public:
  DATA();
  virtual ~DATA();

  DATA(const DATA& from);

  inline DATA& operator=(const DATA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DATA& default_instance();

  void Swap(DATA* other);

  // implements Message ----------------------------------------------

  DATA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DATA& from);
  void MergeFrom(const DATA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DATA_Type Type;
  static const Type CAM = DATA_Type_CAM;
  static const Type DENM = DATA_Type_DENM;
  static const Type FCD = DATA_Type_FCD;
  static inline bool Type_IsValid(int value) {
    return DATA_Type_IsValid(value);
  }
  static const Type Type_MIN =
    DATA_Type_Type_MIN;
  static const Type Type_MAX =
    DATA_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    DATA_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return DATA_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return DATA_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return DATA_Type_Parse(name, value);
  }

  typedef DATA_Priority Priority;
  static const Priority BK = DATA_Priority_BK;
  static const Priority BE = DATA_Priority_BE;
  static const Priority VI = DATA_Priority_VI;
  static const Priority VO = DATA_Priority_VO;
  static inline bool Priority_IsValid(int value) {
    return DATA_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    DATA_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    DATA_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    DATA_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return DATA_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return DATA_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return DATA_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .dataPackage.DATA.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::dataPackage::DATA_Type type() const;
  inline void set_type(::dataPackage::DATA_Type value);

  // required .dataPackage.DATA.Priority priority = 3;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 3;
  inline ::dataPackage::DATA_Priority priority() const;
  inline void set_priority(::dataPackage::DATA_Priority value);

  // optional int64 createTime = 4;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int64 validUntil = 5;
  inline bool has_validuntil() const;
  inline void clear_validuntil();
  static const int kValidUntilFieldNumber = 5;
  inline ::google::protobuf::int64 validuntil() const;
  inline void set_validuntil(::google::protobuf::int64 value);

  // optional double txPower = 6;
  inline bool has_txpower() const;
  inline void clear_txpower();
  static const int kTxPowerFieldNumber = 6;
  inline double txpower() const;
  inline void set_txpower(double value);

  // optional double bitRate = 7;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitRateFieldNumber = 7;
  inline double bitrate() const;
  inline void set_bitrate(double value);

  // required bytes content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:dataPackage.DATA)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_validuntil();
  inline void clear_has_validuntil();
  inline void set_has_txpower();
  inline void clear_has_txpower();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  int type_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 validuntil_;
  double txpower_;
  double bitrate_;
  ::std::string* content_;
  int priority_;
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static DATA* default_instance_;
};
// ===================================================================


// ===================================================================

// DATA

// required int32 id = 1;
inline bool DATA::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DATA::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DATA::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DATA::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DATA::id() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.id)
  return id_;
}
inline void DATA::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.id)
}

// required .dataPackage.DATA.Type type = 2;
inline bool DATA::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DATA::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DATA::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DATA::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::dataPackage::DATA_Type DATA::type() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.type)
  return static_cast< ::dataPackage::DATA_Type >(type_);
}
inline void DATA::set_type(::dataPackage::DATA_Type value) {
  assert(::dataPackage::DATA_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.type)
}

// required .dataPackage.DATA.Priority priority = 3;
inline bool DATA::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DATA::set_has_priority() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DATA::clear_has_priority() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DATA::clear_priority() {
  priority_ = 1;
  clear_has_priority();
}
inline ::dataPackage::DATA_Priority DATA::priority() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.priority)
  return static_cast< ::dataPackage::DATA_Priority >(priority_);
}
inline void DATA::set_priority(::dataPackage::DATA_Priority value) {
  assert(::dataPackage::DATA_Priority_IsValid(value));
  set_has_priority();
  priority_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.priority)
}

// optional int64 createTime = 4;
inline bool DATA::has_createtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DATA::set_has_createtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DATA::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DATA::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 DATA::createtime() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.createTime)
  return createtime_;
}
inline void DATA::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.createTime)
}

// optional int64 validUntil = 5;
inline bool DATA::has_validuntil() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DATA::set_has_validuntil() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DATA::clear_has_validuntil() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DATA::clear_validuntil() {
  validuntil_ = GOOGLE_LONGLONG(0);
  clear_has_validuntil();
}
inline ::google::protobuf::int64 DATA::validuntil() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.validUntil)
  return validuntil_;
}
inline void DATA::set_validuntil(::google::protobuf::int64 value) {
  set_has_validuntil();
  validuntil_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.validUntil)
}

// optional double txPower = 6;
inline bool DATA::has_txpower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DATA::set_has_txpower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DATA::clear_has_txpower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DATA::clear_txpower() {
  txpower_ = 0;
  clear_has_txpower();
}
inline double DATA::txpower() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.txPower)
  return txpower_;
}
inline void DATA::set_txpower(double value) {
  set_has_txpower();
  txpower_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.txPower)
}

// optional double bitRate = 7;
inline bool DATA::has_bitrate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DATA::set_has_bitrate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DATA::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DATA::clear_bitrate() {
  bitrate_ = 0;
  clear_has_bitrate();
}
inline double DATA::bitrate() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.bitRate)
  return bitrate_;
}
inline void DATA::set_bitrate(double value) {
  set_has_bitrate();
  bitrate_ = value;
  // @@protoc_insertion_point(field_set:dataPackage.DATA.bitRate)
}

// required bytes content = 8;
inline bool DATA::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DATA::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DATA::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DATA::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& DATA::content() const {
  // @@protoc_insertion_point(field_get:dataPackage.DATA.content)
  return *content_;
}
inline void DATA::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:dataPackage.DATA.content)
}
inline void DATA::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:dataPackage.DATA.content)
}
inline void DATA::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dataPackage.DATA.content)
}
inline ::std::string* DATA::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dataPackage.DATA.content)
  return content_;
}
inline ::std::string* DATA::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DATA::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dataPackage.DATA.content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataPackage

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dataPackage::DATA_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataPackage::DATA_Type>() {
  return ::dataPackage::DATA_Type_descriptor();
}
template <> struct is_proto_enum< ::dataPackage::DATA_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataPackage::DATA_Priority>() {
  return ::dataPackage::DATA_Priority_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
