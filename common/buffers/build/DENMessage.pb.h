// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DENMessage.proto

#ifndef PROTOBUF_DENMessage_2eproto__INCLUDED
#define PROTOBUF_DENMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "DENMManagementContainer.pb.h"
// @@protoc_insertion_point(includes)

namespace its {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DENMessage_2eproto();
void protobuf_AssignDesc_DENMessage_2eproto();
void protobuf_ShutdownFile_DENMessage_2eproto();

class DENMessage;

// ===================================================================

class DENMessage : public ::google::protobuf::Message {
 public:
  DENMessage();
  virtual ~DENMessage();

  DENMessage(const DENMessage& from);

  inline DENMessage& operator=(const DENMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DENMessage& default_instance();

  void Swap(DENMessage* other);

  // implements Message ----------------------------------------------

  DENMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DENMessage& from);
  void MergeFrom(const DENMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .its.DENMManagementContainer managementContainer = 1;
  inline bool has_managementcontainer() const;
  inline void clear_managementcontainer();
  static const int kManagementContainerFieldNumber = 1;
  inline const ::its::DENMManagementContainer& managementcontainer() const;
  inline ::its::DENMManagementContainer* mutable_managementcontainer();
  inline ::its::DENMManagementContainer* release_managementcontainer();
  inline void set_allocated_managementcontainer(::its::DENMManagementContainer* managementcontainer);

  // @@protoc_insertion_point(class_scope:its.DENMessage)
 private:
  inline void set_has_managementcontainer();
  inline void clear_has_managementcontainer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::its::DENMManagementContainer* managementcontainer_;
  friend void  protobuf_AddDesc_DENMessage_2eproto();
  friend void protobuf_AssignDesc_DENMessage_2eproto();
  friend void protobuf_ShutdownFile_DENMessage_2eproto();

  void InitAsDefaultInstance();
  static DENMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// DENMessage

// required .its.DENMManagementContainer managementContainer = 1;
inline bool DENMessage::has_managementcontainer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DENMessage::set_has_managementcontainer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DENMessage::clear_has_managementcontainer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DENMessage::clear_managementcontainer() {
  if (managementcontainer_ != NULL) managementcontainer_->::its::DENMManagementContainer::Clear();
  clear_has_managementcontainer();
}
inline const ::its::DENMManagementContainer& DENMessage::managementcontainer() const {
  // @@protoc_insertion_point(field_get:its.DENMessage.managementContainer)
  return managementcontainer_ != NULL ? *managementcontainer_ : *default_instance_->managementcontainer_;
}
inline ::its::DENMManagementContainer* DENMessage::mutable_managementcontainer() {
  set_has_managementcontainer();
  if (managementcontainer_ == NULL) managementcontainer_ = new ::its::DENMManagementContainer;
  // @@protoc_insertion_point(field_mutable:its.DENMessage.managementContainer)
  return managementcontainer_;
}
inline ::its::DENMManagementContainer* DENMessage::release_managementcontainer() {
  clear_has_managementcontainer();
  ::its::DENMManagementContainer* temp = managementcontainer_;
  managementcontainer_ = NULL;
  return temp;
}
inline void DENMessage::set_allocated_managementcontainer(::its::DENMManagementContainer* managementcontainer) {
  delete managementcontainer_;
  managementcontainer_ = managementcontainer;
  if (managementcontainer) {
    set_has_managementcontainer();
  } else {
    clear_has_managementcontainer();
  }
  // @@protoc_insertion_point(field_set_allocated:its.DENMessage.managementContainer)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace its

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DENMessage_2eproto__INCLUDED
